{
	"info": {
		"_postman_id": "9983dc3d-f2f2-4f67-9def-071c443090e0",
		"name": "Neils patels Apis",
		"description": "NeilPatels Api tokens:\n\nprod: 7d89b112-9d32-4823-895b-dbcb4b604503\n\nstaging: 9ce72cfb-12ce-4601-820e-cdd7ef7bea79EndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34880926",
		"_collection_link": "https://speeding-capsule-844584.postman.co/workspace/Team-Workspace~9332a0bd-3e54-4d45-8848-bfa83d77e8e1/collection/25043057-9983dc3d-f2f2-4f67-9def-071c443090e0?action=share&source=collection_link&creator=34880926"
	},
	"item": [
		{
			"name": "AW3",
			"item": [
				{
					"name": "Article writer 3 sse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Test 1: Verify response status code is 200 (OK)\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Verify Content-Type header is correct for SSE\r",
									"pm.test(\"Content-Type header is text/event-stream\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/event-stream\");\r",
									"});\r",
									"\r",
									"// Test 3: Verify the response is not empty\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.response.to.not.be.empty;\r",
									"    pm.expect(pm.response.text().length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"// Test 4: Parse the response and extract all events\r",
									"const responseText = pm.response.text();\r",
									"const responseLines = responseText.split(\"\\n\");\r",
									"const events = [];\r",
									"let currentEvent = null;\r",
									"\r",
									"for (let i = 0; i < responseLines.length; i++) {\r",
									"    const line = responseLines[i].trim();\r",
									"    \r",
									"    if (line.startsWith(\"event:\")) {\r",
									"        if (currentEvent) {\r",
									"            events.push(currentEvent);\r",
									"        }\r",
									"        currentEvent = {\r",
									"            type: line.substring(6).trim(),\r",
									"            data: []\r",
									"        };\r",
									"    } else if (line.startsWith(\"data:\") && currentEvent) {\r",
									"        currentEvent.data.push(line.substring(5));\r",
									"    } else if (line === \"\" && currentEvent) {\r",
									"        // Empty line indicates end of an event\r",
									"        if (Object.keys(currentEvent).length > 0) {\r",
									"            events.push(currentEvent);\r",
									"            currentEvent = null;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"// Add the last event if there is one\r",
									"if (currentEvent && Object.keys(currentEvent).length > 0) {\r",
									"    events.push(currentEvent);\r",
									"}\r",
									"\r",
									"// Store the parsed events for use in subsequent tests\r",
									"pm.variables.set(\"parsedEvents\", JSON.stringify(events));\r",
									"\r",
									"// Test 5: Verify presence of update events\r",
									"pm.test(\"Response contains update events\", function() {\r",
									"    const updateEvents = events.filter(event => event.type === \"update\");\r",
									"    pm.expect(updateEvents.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"// Test 6: Verify essential events exist if response ends with \"Success\"\r",
									"pm.test(\"Response contains all required event types when complete\", function() {\r",
									"    // Check if the response ends with Success\r",
									"    const endsWithSuccess = responseText.includes(\"event: end\") && \r",
									"                            responseText.includes(\"data: Success\");\r",
									"    \r",
									"    if (endsWithSuccess) {\r",
									"        // These events should be present in a complete response\r",
									"        const requiredEventTypes = [\r",
									"            \"update\"\r",
									"        ];\r",
									"        \r",
									"        // Check if assistant response contains additional events\r",
									"        if (responseText.includes(\"user_message_uuid\")) {\r",
									"            requiredEventTypes.push(\"user_message_uuid\", \"assistant_message_uuid\", \"end\");\r",
									"        }\r",
									"        \r",
									"        requiredEventTypes.forEach(eventType => {\r",
									"            const hasEventType = events.some(event => event.type === eventType);\r",
									"            pm.expect(hasEventType).to.be.true;\r",
									"        });\r",
									"    } else {\r",
									"        pm.test.skip(\"Response does not end with Success, skipping complete response validation\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test 7: Validate UUID format when present\r",
									"pm.test(\"UUIDs are in valid format when present\", function() {\r",
									"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;\r",
									"    \r",
									"    // Check for user_message_uuid and assistant_message_uuid events\r",
									"    const uuidEvents = events.filter(event => \r",
									"        event.type === \"user_message_uuid\" || \r",
									"        event.type === \"assistant_message_uuid\"\r",
									"    );\r",
									"    \r",
									"    if (uuidEvents.length > 0) {\r",
									"        uuidEvents.forEach(event => {\r",
									"            if (event.data && event.data.length > 0) {\r",
									"                try {\r",
									"                    const dataObj = JSON.parse(event.data[0]);\r",
									"                    if (dataObj.uuid) {\r",
									"                        pm.expect(dataObj.uuid).to.match(uuidRegex);\r",
									"                    }\r",
									"                } catch (e) {\r",
									"                    pm.expect.fail(`Failed to parse UUID JSON: ${e.message}`);\r",
									"                }\r",
									"            }\r",
									"        });\r",
									"    } else {\r",
									"        pm.test.skip(\"No UUID events found in response\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test 8: Validate ping message format when present\r",
									"pm.test(\"Ping message format is correct (if present)\", function() {\r",
									"    if (responseText.includes(\": ping\")) {\r",
									"        const pingLine = responseLines.find(line => line.includes(\": ping\"));\r",
									"        pm.expect(pingLine).to.match(/: ping - \\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}/);\r",
									"    } else {\r",
									"        pm.test.skip(\"No ping message found in this response\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test 9: Check content is related to AI/copywriting\r",
									"pm.test(\"Response contains AI or copywriting related content\", function() {\r",
									"    const updateEvents = events.filter(event => event.type === \"update\");\r",
									"    const updateContent = updateEvents.flatMap(event => event.data).join(\" \");\r",
									"    \r",
									"    const aiKeywords = [\r",
									"        \"AI\", \"Artificial Intelligence\", \"machine learning\", \"algorithm\", \r",
									"        \"automation\", \"copy\", \"writing\", \"content\", \"generation\"\r",
									"    ];\r",
									"    \r",
									"    const containsAIContent = aiKeywords.some(keyword => \r",
									"        updateContent.includes(keyword)\r",
									"    );\r",
									"    \r",
									"    pm.expect(containsAIContent).to.be.true;\r",
									"});\r",
									"\r",
									"// Test 10: Verify meta event structure when present\r",
									"pm.test(\"Meta event has required properties when present\", function() {\r",
									"    const metaEvents = events.filter(event => event.type === \"meta\");\r",
									"    \r",
									"    if (metaEvents.length > 0) {\r",
									"        metaEvents.forEach(event => {\r",
									"            if (event.data && event.data.length > 0) {\r",
									"                try {\r",
									"                    const metaData = JSON.parse(event.data[0]);\r",
									"                    pm.expect(metaData).to.have.property(\"remaining_generations\");\r",
									"                    pm.expect(metaData).to.have.property(\"is_conversation_limit_reached\");\r",
									"                } catch (e) {\r",
									"                    pm.expect.fail(`Failed to parse meta event data: ${e.message}`);\r",
									"                }\r",
									"            }\r",
									"        });\r",
									"    } else {\r",
									"        pm.test.skip(\"No meta events found in response\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test 11: Verify should_nudge_for_mm event format when present\r",
									"pm.test(\"should_nudge_for_mm event has correct format when present\", function() {\r",
									"    const nudgeEvents = events.filter(event => event.type === \"should_nudge_for_mm\");\r",
									"    \r",
									"    if (nudgeEvents.length > 0) {\r",
									"        nudgeEvents.forEach(event => {\r",
									"            if (event.data && event.data.length > 0) {\r",
									"                try {\r",
									"                    const nudgeData = JSON.parse(event.data[0]);\r",
									"                    pm.expect(nudgeData).to.have.property(\"should_nudge_for_mm\");\r",
									"                    pm.expect(typeof nudgeData.should_nudge_for_mm).to.equal(\"boolean\");\r",
									"                } catch (e) {\r",
									"                    pm.expect.fail(`Failed to parse nudge event data: ${e.message}`);\r",
									"                }\r",
									"            }\r",
									"        });\r",
									"    } else {\r",
									"        pm.test.skip(\"No should_nudge_for_mm events found in response\");\r",
									"    }\r",
									"});\r",
									"// Test 13: Check for structured content patterns (Markdown headers, images)\r",
									"pm.test(\"Response contains structured content patterns\", function() {\r",
									"    const updateContent = events\r",
									"        .filter(event => event.type === \"update\")\r",
									"        .flatMap(event => event.data)\r",
									"        .join(\"\\n\");\r",
									"    \r",
									"    // Look for markdown headers, images, or HTML tags\r",
									"    const hasStructuredContent = \r",
									"        updateContent.includes(\"#\") || \r",
									"        updateContent.includes(\"![Image]\") || \r",
									"        updateContent.includes(\"<br\") ||\r",
									"        updateContent.includes(\"<sub>\");\r",
									"    \r",
									"    pm.expect(hasStructuredContent).to.be.true;\r",
									"});\r",
									"\r",
									"// Test 14: Verify event sequence logic\r",
									"pm.test(\"Events follow logical sequence\", function() {\r",
									"    // Check for loading at beginning (if present)\r",
									"    if (events.length > 0 && events.some(e => e.type === \"loading\")) {\r",
									"        const loadingIndex = events.findIndex(e => e.type === \"loading\");\r",
									"        pm.expect(loadingIndex).to.be.lessThan(5); // Should be among first few events\r",
									"    }\r",
									"    \r",
									"    // Check for end at the end (if present)\r",
									"    if (events.length > 0 && events.some(e => e.type === \"end\")) {\r",
									"        const endIndex = events.findIndex(e => e.type === \"end\");\r",
									"        pm.expect(endIndex).to.be.greaterThan(events.length - 3); // Should be among last few events\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test 15: Check for consistent event-data pairing\r",
									"pm.test(\"Events and data are consistently paired\", function() {\r",
									"    let eventCount = 0;\r",
									"    let dataLineCount = 0;\r",
									"    \r",
									"    responseLines.forEach(line => {\r",
									"        if (line.trim().startsWith(\"event:\")) {\r",
									"            eventCount++;\r",
									"        } else if (line.trim().startsWith(\"data:\")) {\r",
									"            dataLineCount++;\r",
									"        }\r",
									"    });\r",
									"    \r",
									"    // In a proper SSE response, each event should have at least one data line\r",
									"    // But there can be multiple data lines per event\r",
									"    pm.expect(dataLineCount).to.be.at.least(eventCount);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/v2/business/content/ai-article-writer-v3/sse?engine=premium&language=en&data={%0A%20%22article_title%22%3A%20%22AI%20in%20copywriting%22%2C%0A%20%22article_intro%22%3A%20%22AI%20stands%20for%20Artificial%20Intelligence%22%2C%0A%20%22article_sections%22%3A%20[%22Introduction%20to%20AI%22%2C%20%22Advantages%20of%20AI%22]%0A}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"ai-article-writer-v3",
								"sse"
							],
							"query": [
								{
									"key": "engine",
									"value": "premium"
								},
								{
									"key": "language",
									"value": "en"
								},
								{
									"key": "data",
									"value": "{%0A%20%22article_title%22%3A%20%22AI%20in%20copywriting%22%2C%0A%20%22article_intro%22%3A%20%22AI%20stands%20for%20Artificial%20Intelligence%22%2C%0A%20%22article_sections%22%3A%20[%22Introduction%20to%20AI%22%2C%20%22Advantages%20of%20AI%22]%0A}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AW4",
			"item": [
				{
					"name": "Article Writer 4.O",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Test 1: Verify response status code is 200 (OK)\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Verify that the response contains SSE format (events and data)\r",
									"pm.test(\"Response contains SSE format with events and data\", function() {\r",
									"    pm.expect(pm.response.text()).to.include(\"event: update\");\r",
									"    pm.expect(pm.response.text()).to.include(\"data:\");\r",
									"});\r",
									"\r",
									"// Test 3: Verify that the content type header is correct for SSE\r",
									"pm.test(\"Content-Type header is present and correct\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/event-stream\");\r",
									"});\r",
									"\r",
									"\r",
									"// Test 4: Verify event structure consistency\r",
									"pm.test(\"Event structure is consistent\", function() {\r",
									"    const responseLines = pm.response.text().split(\"\\n\");\r",
									"    let eventCount = 0;\r",
									"    let dataCount = 0;\r",
									"    \r",
									"    responseLines.forEach(line => {\r",
									"        if (line.startsWith(\"event: update\")) {\r",
									"            eventCount++;\r",
									"        } else if (line.startsWith(\"data:\")) {\r",
									"            dataCount++;\r",
									"        }\r",
									"    });\r",
									"    \r",
									"    pm.expect(eventCount).to.be.greaterThan(0);\r",
									"    pm.expect(dataCount).to.be.greaterThan(0);\r",
									"    // In a well-formed SSE response, we'd typically expect these to be related\r",
									"    // The exact relationship depends on your API's specific behavior\r",
									"});\r",
									"\r",
									"// Test 5: Verify the response contains image data references\r",
									"pm.test(\"Response contains image data references\", function() {\r",
									"    pm.expect(pm.response.text()).to.include(\"Image\");\r",
									"    pm.expect(pm.response.text()).to.include(\"https://images.pexels.com\");\r",
									"});\r",
									"\r",
									"// Test 6: Check if there are no error events in the response\r",
									"pm.test(\"No error events in the response\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"event: error\");\r",
									"});\r",
									"\r",
									"\r",
									"// Test 7: Verify ping message format if present\r",
									"pm.test(\"Ping message format is correct (if present)\", function() {\r",
									"    const responseText = pm.response.text();\r",
									"    \r",
									"    if (responseText.includes(\": ping\")) {\r",
									"        const pingLine = responseText.split(\"\\n\").find(line => line.includes(\": ping\"));\r",
									"        pm.expect(pingLine).to.match(/: ping - \\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}/);\r",
									"    } else {\r",
									"        pm.test.skip(\"No ping message found in this response\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test 8: Verify response completion (optional, if your API indicates completion)\r",
									"pm.test(\"Response indicates proper completion\", function() {\r",
									"    // This test may need customization based on how your API signals completion\r",
									"    // For example, some SSE implementations send a specific event like \"complete\"\r",
									"    // or have a known final message\r",
									"    \r",
									"    const responseText = pm.response.text();\r",
									"    const lastLines = responseText.split(\"\\n\").slice(-10).join(\"\\n\");\r",
									"    \r",
									"    // If your API has a specific completion indicator, check for it here\r",
									"    // This is a placeholder test that may need adjustment\r",
									"    pm.expect(true).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "{{X-API-KEY}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/v2/business/content/ai-article-writer-v4/sse?engine={{engine}}&language={{language}}&data={\"article_title\": \"AI in copywriting\",\"person\": \"Third Person\",\"article_sections\": [\"Introduction to AI\", \"Advantages of AI\"]}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"ai-article-writer-v4",
								"sse"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "data",
									"value": "{\"article_title\": \"AI in copywriting\",\"person\": \"Third Person\",\"article_sections\": [\"Introduction to AI\", \"Advantages of AI\"]}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CHATSONIC_SSE",
			"item": [
				{
					"name": "Chatsonic sse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Test 1: Verify response status code is 200 (OK)\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Verify Content-Type header is correct for SSE\r",
									"pm.test(\"Content-Type header is text/event-stream\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/event-stream\");\r",
									"});\r",
									"\r",
									"// Test 3: Verify required event types are present\r",
									"pm.test(\"Response contains all required event types\", function() {\r",
									"    const responseText = pm.response.text();\r",
									"    const requiredEvents = [\r",
									"        \"event: loading\",\r",
									"        \"event: user_message_uuid\",\r",
									"        \"event: assistant_message_uuid\",\r",
									"        \"event: update\",\r",
									"        \"event: should_nudge_for_mm\",\r",
									"        \"event: meta\",\r",
									"        \"event: end\"\r",
									"    ];\r",
									"    \r",
									"    requiredEvents.forEach(eventType => {\r",
									"        pm.expect(responseText).to.include(eventType);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test 5: Verify loading event has appropriate data\r",
									"pm.test(\"Loading event has appropriate structure\", function() {\r",
									"    const responseLines = pm.response.text().split(\"\\n\");\r",
									"    let foundLoadingEvent = false;\r",
									"    \r",
									"    for (let i = 0; i < responseLines.length; i++) {\r",
									"        if (responseLines[i].trim() === \"event: loading\") {\r",
									"            foundLoadingEvent = true;\r",
									"            // The next line should be a data line\r",
									"            if (i + 1 < responseLines.length) {\r",
									"                pm.expect(responseLines[i+1].trim()).to.match(/^data:.*$/);\r",
									"            }\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    pm.expect(foundLoadingEvent).to.be.true;\r",
									"});\r",
									"\r",
									"// Test 6: Verify response ends with success message\r",
									"pm.test(\"Response ends with success message\", function() {\r",
									"    const responseLines = pm.response.text().split(\"\\n\");\r",
									"    let endEventIndex = -1;\r",
									"    \r",
									"    // Find the end event\r",
									"    for (let i = 0; i < responseLines.length; i++) {\r",
									"        if (responseLines[i].trim() === \"event: end\") {\r",
									"            endEventIndex = i;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    pm.expect(endEventIndex).to.not.equal(-1);\r",
									"    \r",
									"    // Check if the next non-empty line is a success data message\r",
									"    if (endEventIndex !== -1 && endEventIndex + 1 < responseLines.length) {\r",
									"        pm.expect(responseLines[endEventIndex + 1].trim()).to.equal(\"data: Success\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test 7: Verify meta event contains required properties\r",
									"pm.test(\"Meta event contains required properties\", function() {\r",
									"    const responseLines = pm.response.text().split(\"\\n\");\r",
									"    let metaEventDataLine = \"\";\r",
									"    \r",
									"    // Find the meta event data\r",
									"    for (let i = 0; i < responseLines.length; i++) {\r",
									"        if (responseLines[i].trim() === \"event: meta\" && i + 1 < responseLines.length) {\r",
									"            metaEventDataLine = responseLines[i + 1];\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    pm.expect(metaEventDataLine).to.not.be.empty;\r",
									"    \r",
									"    // Check that it contains the required properties\r",
									"    pm.expect(metaEventDataLine).to.include(\"remaining_generations\");\r",
									"    pm.expect(metaEventDataLine).to.include(\"is_conversation_limit_reached\");\r",
									"});\r",
									"\r",
									"// Test 9: Verify should_nudge_for_mm event\r",
									"pm.test(\"should_nudge_for_mm event has correct format\", function() {\r",
									"    const responseLines = pm.response.text().split(\"\\n\");\r",
									"    let nudgeEventDataLine = \"\";\r",
									"    \r",
									"    // Find the should_nudge_for_mm event data\r",
									"    for (let i = 0; i < responseLines.length; i++) {\r",
									"        if (responseLines[i].trim() === \"event: should_nudge_for_mm\" && i + 1 < responseLines.length) {\r",
									"            nudgeEventDataLine = responseLines[i + 1];\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    pm.expect(nudgeEventDataLine).to.not.be.empty;\r",
									"    \r",
									"    // Check that it contains the required property\r",
									"    pm.expect(nudgeEventDataLine).to.include(\"should_nudge_for_mm\");\r",
									"    \r",
									"    // Check that it's a boolean value\r",
									"    pm.expect(nudgeEventDataLine).to.match(/data: {\"should_nudge_for_mm\": (true|false)}/);\r",
									"});\r",
									"\r",
									"// Test 10: Verify overall sequence of events follows expected pattern\r",
									"pm.test(\"Events follow expected sequence\", function() {\r",
									"    const responseText = pm.response.text();\r",
									"    const eventSequence = responseText.match(/event: [a-z_]+/g);\r",
									"    \r",
									"    // Event pattern expectations (simplified for flexibility):\r",
									"    // 1. Should start with loading\r",
									"    if (eventSequence && eventSequence.length > 0) {\r",
									"        pm.expect(eventSequence[0]).to.equal(\"event: loading\");\r",
									"    }\r",
									"    \r",
									"    // 2. Should include user and assistant message UUIDs near the beginning\r",
									"    if (eventSequence && eventSequence.length > 2) {\r",
									"        pm.expect(eventSequence.slice(0, 4).join(\" \")).to.include(\"event: user_message_uuid\");\r",
									"        pm.expect(eventSequence.slice(0, 4).join(\" \")).to.include(\"event: assistant_message_uuid\");\r",
									"    }\r",
									"    \r",
									"    // 3. Should end with meta and end events\r",
									"    if (eventSequence && eventSequence.length > 2) {\r",
									"        const lastEvents = eventSequence.slice(-2);\r",
									"        pm.expect(lastEvents).to.include(\"event: meta\");\r",
									"        pm.expect(lastEvents).to.include(\"event: end\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "<Your API Key>"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://api.writesonic.com/v2/business/content/chatsonic/sse?engine=superior&language=en&data=%7B%22enable_memory%22%3Atrue%2C%22enable_google_results%22%3Atrue%2C%22input_text%22%3A%22Define%20AI%22%2C%22history_data%22%3A%5B%7B%22is_sent%22%3Atrue%2C%22message%22%3A%22Tell%20me%20about%20AI%22%7D%2C%7B%22is_sent%22%3Afalse%2C%22message%22%3A%22Sure%20what%20exactly%3F%22%7D%5D%7D",
							"protocol": "https",
							"host": [
								"api",
								"writesonic",
								"com"
							],
							"path": [
								"v2",
								"business",
								"content",
								"chatsonic",
								"sse"
							],
							"query": [
								{
									"key": "engine",
									"value": "superior"
								},
								{
									"key": "language",
									"value": "en"
								},
								{
									"key": "data",
									"value": "%7B%22enable_memory%22%3Atrue%2C%22enable_google_results%22%3Atrue%2C%22input_text%22%3A%22Define%20AI%22%2C%22history_data%22%3A%5B%7B%22is_sent%22%3Atrue%2C%22message%22%3A%22Tell%20me%20about%20AI%22%7D%2C%7B%22is_sent%22%3Afalse%2C%22message%22%3A%22Sure%20what%20exactly%3F%22%7D%5D%7D"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AI Article Writers",
			"item": [
				{
					"name": "AI Article Ideas",
					"item": [
						{
							"name": "TC-01-AI Article Ideas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"Artificial Intelligence in Copywriting\",\n     \"primary_keyword\": \"test\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC-02-AI Article Ideas-Mandatory Validation for Topic field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "1814e9a3-b98c-4366-9e23-f2fc2d6f041e"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"\",\n     \"primary_keyword\": \"AI\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Ideas-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "1814e9a3-b98c-4366-9e23-f2fc2d6f041e"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"Artificial Intelligence in Copywriting\",\n     \"primary_keyword\": \"AI\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-ideas?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Ideas-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "1814e9a3-b98c-4366-9e23-f2fc2d6f041e"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"Artificial Intelligence in Copywriting\",\n     \"primary_keyword\": \"AI\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-ideas?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Ideas-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "1814e9a3-b98c-4366-9e23-f2fc2d6f041e"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"Artificial Intelligence in Copywriting\",\n     \"primary_keyword\": \"AI\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-ideas?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AI Article Intros",
					"item": [
						{
							"name": "AI Article Intros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"// Response data type validation\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-intros?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-intros"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Intros-Mandatory validation for blog_title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-intros?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-intros"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Intros-Mandatory validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-intros?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-intros"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Intros-Mandatory validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-intros?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-intros"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Intros-Mandatory validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-intros?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-intros"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AI Article Outlines",
					"item": [
						{
							"name": "AI Article Outlines",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\",\n    \"blog_intro\": \"The possibilities of artificial intelligence (AI) seem endless. It’s predicted that AI will soon have the ability to write articles, screen movies, and even drive cars on our behalf. But what about copywriting? Can AI be the next copywriter? I’ve spent the past few weeks doing some research and experimenting, and I’ve come up with a few ideas for how AI will change the world of copywriting.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-outlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Outlines-Mandatory validation for blog_title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"\",\n     \"blog_intro\": \"The possibilities of artificial intelligence (AI) seem endless. It’s predicted that AI will soon have the ability to write articles, screen movies, and even drive cars on our behalf. But what about copywriting? Can AI be the next copywriter? I’ve spent the past few weeks doing some research and experimenting, and I’ve come up with a few ideas for how AI will change the world of copywriting.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-outlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Outlines-Mandatory validation for blog_intro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\",\n     \"blog_intro\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-outlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Outlines-Mandatory validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\",\n     \"blog_intro\": \"The possibilities of artificial intelligence (AI) seem endless. It’s predicted that AI will soon have the ability to write articles, screen movies, and even drive cars on our behalf. But what about copywriting? Can AI be the next copywriter? I’ve spent the past few weeks doing some research and experimenting, and I’ve come up with a few ideas for how AI will change the world of copywriting.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-outlines?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Outlines-Mandatory validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\",\n     \"blog_intro\": \"The possibilities of artificial intelligence (AI) seem endless. It’s predicted that AI will soon have the ability to write articles, screen movies, and even drive cars on our behalf. But what about copywriting? Can AI be the next copywriter? I’ve spent the past few weeks doing some research and experimenting, and I’ve come up with a few ideas for how AI will change the world of copywriting.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-outlines?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Outlines-Mandatory validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\",\n     \"blog_intro\": \"The possibilities of artificial intelligence (AI) seem endless. It’s predicted that AI will soon have the ability to write articles, screen movies, and even drive cars on our behalf. But what about copywriting? Can AI be the next copywriter? I’ve spent the past few weeks doing some research and experimenting, and I’ve come up with a few ideas for how AI will change the world of copywriting.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-outlines?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AI Article Writer 3.0",
					"item": [
						{
							"name": "AI Article Writer 3.0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"article_title\", \"content\", \"article_intro\", \"article_sections\");\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.article_title).to.be.an(\"string\");\r",
											"    pm.expect(jsonData.article_intro).to.be.an(\"string\");\r",
											"    pm.expect(jsonData.article_sections).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.article_title).to.be.an(\"string\");\r",
											"    pm.expect(jsonData.article_intro).to.be.an(\"string\");\r",
											"    pm.expect(jsonData.article_sections).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"article_title\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"article_intro\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"article_sections\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"title\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"content\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"title\",\r",
											"            \"content\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"article_title\",\r",
											"    \"article_intro\",\r",
											"    \"article_sections\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"article_sections\": [\n          \"Advantages of establishing human settlements on Mars\"\n     ],\n     \"article_title\": \"Supporting life on Mars is difficult but possible\",\n     \"article_intro\": \"Life on Mars may seem like a distant dream—at least until it's actually possible. The Red Planet has just started to warm up, but increasing land and water temperatures there could keep humans alive for many years. Or at least that's what the latest estimates say. Even with NASA still planning a return to the Moon by 2020, Mars is a far cry from being autonomous self-sustaining society. But what if we could help our Mars friends already on Earth? Could we establish human settlements there as a way to boost local populations and bring us more than just another planet in a system? In this blog post, we take a look at how creating settlements on Mars would be possible. While it might seem like science fiction, the idea of creating colonies on another world doesn't seem so far-fetched these days. And research is only getting started on how such recreations of our past can help mankind conquer fear and depression while also turning back time to save the world...\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/ai-article-writer-v3?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"ai-article-writer-v3"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Writer 3.0-Mandatory validation for article_title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"article_title\",\"article_intro\",\"article_sections\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"article_title\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"article_intro\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"article_sections\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"title\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"content\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"title\",\r",
											"            \"content\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"article_title\",\r",
											"    \"article_intro\",\r",
											"    \"article_sections\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"article_sections\": [\n          \"Advantages of establishing human settlements on Mars\"\n     ],\n     \"article_title\": \"\",\n     \"article_intro\": \"Life on Mars may seem like a distant dream—at least until it's actually possible. The Red Planet has just started to warm up, but increasing land and water temperatures there could keep humans alive for many years. Or at least that's what the latest estimates say. Even with NASA still planning a return to the Moon by 2020, Mars is a far cry from being autonomous self-sustaining society. But what if we could help our Mars friends already on Earth? Could we establish human settlements there as a way to boost local populations and bring us more than just another planet in a system? In this blog post, we take a look at how creating settlements on Mars would be possible. While it might seem like science fiction, the idea of creating colonies on another world doesn't seem so far-fetched these days. And research is only getting started on how such recreations of our past can help mankind conquer fear and depression while also turning back time to save the world...\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/ai-article-writer-v3?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"ai-article-writer-v3"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Writer 3.0-Mandatory validation for article_intro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"article_title\",\"article_intro\",\"article_sections\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"article_title\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"article_intro\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"article_sections\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"title\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"content\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"title\",\r",
											"            \"content\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"article_title\",\r",
											"    \"article_intro\",\r",
											"    \"article_sections\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"article_sections\": [\n          \"Advantages of establishing human settlements on Mars\"\n     ],\n     \"article_title\": \"Supporting life on Mars is difficult but possible\",\n     \"article_intro\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/ai-article-writer-v3?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"ai-article-writer-v3"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Writer 3.0-Mandatory validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"article_sections\": [\n          \"Advantages of establishing human settlements on Mars\"\n     ],\n     \"article_title\": \"Supporting life on Mars is difficult but possible\",\n     \"article_intro\": \"Life on Mars may seem like a distant dream—at least until it's actually possible. The Red Planet has just started to warm up, but increasing land and water temperatures there could keep humans alive for many years. Or at least that's what the latest estimates say. Even with NASA still planning a return to the Moon by 2020, Mars is a far cry from being autonomous self-sustaining society. But what if we could help our Mars friends already on Earth? Could we establish human settlements there as a way to boost local populations and bring us more than just another planet in a system? In this blog post, we take a look at how creating settlements on Mars would be possible. While it might seem like science fiction, the idea of creating colonies on another world doesn't seem so far-fetched these days. And research is only getting started on how such recreations of our past can help mankind conquer fear and depression while also turning back time to save the world...\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/ai-article-writer-v3?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"ai-article-writer-v3"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Writer 3.0-Mandatory validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"article_sections\": [\n          \"Advantages of establishing human settlements on Mars\"\n     ],\n     \"article_title\": \"Supporting life on Mars is difficult but possible\",\n     \"article_intro\": \"Life on Mars may seem like a distant dream—at least until it's actually possible. The Red Planet has just started to warm up, but increasing land and water temperatures there could keep humans alive for many years. Or at least that's what the latest estimates say. Even with NASA still planning a return to the Moon by 2020, Mars is a far cry from being autonomous self-sustaining society. But what if we could help our Mars friends already on Earth? Could we establish human settlements there as a way to boost local populations and bring us more than just another planet in a system? In this blog post, we take a look at how creating settlements on Mars would be possible. While it might seem like science fiction, the idea of creating colonies on another world doesn't seem so far-fetched these days. And research is only getting started on how such recreations of our past can help mankind conquer fear and depression while also turning back time to save the world...\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/ai-article-writer-v3?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"ai-article-writer-v3"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Writer 3.0-Mandatory validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"article_sections\": [\n          \"Advantages of establishing human settlements on Mars\"\n     ],\n     \"article_title\": \"Supporting life on Mars is difficult but possible\",\n     \"article_intro\": \"Life on Mars may seem like a distant dream—at least until it's actually possible. The Red Planet has just started to warm up, but increasing land and water temperatures there could keep humans alive for many years. Or at least that's what the latest estimates say. Even with NASA still planning a return to the Moon by 2020, Mars is a far cry from being autonomous self-sustaining society. But what if we could help our Mars friends already on Earth? Could we establish human settlements there as a way to boost local populations and bring us more than just another planet in a system? In this blog post, we take a look at how creating settlements on Mars would be possible. While it might seem like science fiction, the idea of creating colonies on another world doesn't seem so far-fetched these days. And research is only getting started on how such recreations of our past can help mankind conquer fear and depression while also turning back time to save the world...\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/ai-article-writer-v3?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"ai-article-writer-v3"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Article Re Writer",
					"item": [
						{
							"name": "Article ReWriter",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"link\": \"https://www.bleepingcomputer.com/news/security/suncor-energy-cyberattack-impacts-petro-canada-gas-stations/\"\r\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/article-rewriter?engine=premium&num_copies=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"article-rewriter"
									],
									"query": [
										{
											"key": "engine",
											"value": "premium"
										},
										{
											"key": "num_copies",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "AI Article Intros",
			"item": [
				{
					"name": "AI Article Intros",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"// Response data type validation\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/blog-intros?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"blog-intros"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AI Article Intros-Mandatory validation for blog_title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_title\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/blog-intros?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"blog-intros"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AI Article Intros-Mandatory validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/blog-intros?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"blog-intros"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AI Article Intros-Mandatory validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/blog-intros?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"blog-intros"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AI Article Intros-Mandatory validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/blog-intros?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"blog-intros"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AI Article Outlines",
			"item": [
				{
					"name": "AI Article Outlines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "{{X-API-KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\",\n    \"blog_intro\": \"The possibilities of artificial intelligence (AI) seem endless. It’s predicted that AI will soon have the ability to write articles, screen movies, and even drive cars on our behalf. But what about copywriting? Can AI be the next copywriter? I’ve spent the past few weeks doing some research and experimenting, and I’ve come up with a few ideas for how AI will change the world of copywriting.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/blog-outlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"blog-outlines"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AI Article Outlines-Mandatory validation for blog_title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "{{X-API-KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_title\": \"\",\n     \"blog_intro\": \"The possibilities of artificial intelligence (AI) seem endless. It’s predicted that AI will soon have the ability to write articles, screen movies, and even drive cars on our behalf. But what about copywriting? Can AI be the next copywriter? I’ve spent the past few weeks doing some research and experimenting, and I’ve come up with a few ideas for how AI will change the world of copywriting.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/blog-outlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"blog-outlines"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AI Article Outlines-Mandatory validation for blog_intro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "{{X-API-KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\",\n     \"blog_intro\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/blog-outlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"blog-outlines"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AI Article Outlines-Mandatory validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "{{X-API-KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\",\n     \"blog_intro\": \"The possibilities of artificial intelligence (AI) seem endless. It’s predicted that AI will soon have the ability to write articles, screen movies, and even drive cars on our behalf. But what about copywriting? Can AI be the next copywriter? I’ve spent the past few weeks doing some research and experimenting, and I’ve come up with a few ideas for how AI will change the world of copywriting.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/blog-outlines?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"blog-outlines"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AI Article Outlines-Mandatory validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "{{X-API-KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\",\n     \"blog_intro\": \"The possibilities of artificial intelligence (AI) seem endless. It’s predicted that AI will soon have the ability to write articles, screen movies, and even drive cars on our behalf. But what about copywriting? Can AI be the next copywriter? I’ve spent the past few weeks doing some research and experimenting, and I’ve come up with a few ideas for how AI will change the world of copywriting.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/blog-outlines?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"blog-outlines"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "AI Article Outlines-Mandatory validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "{{X-API-KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\",\n     \"blog_intro\": \"The possibilities of artificial intelligence (AI) seem endless. It’s predicted that AI will soon have the ability to write articles, screen movies, and even drive cars on our behalf. But what about copywriting? Can AI be the next copywriter? I’ve spent the past few weeks doing some research and experimenting, and I’ve come up with a few ideas for how AI will change the world of copywriting.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/blog-outlines?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"blog-outlines"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Google Ad Descriptions V2",
			"item": [
				{
					"name": "Google Ad Descriptions V2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"name\": \"Writesonic\",\n     \"details\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/google-ad-descriptions-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"google-ad-descriptions-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Google Ad Descriptions V2-Mandatory Validation for name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"name\": \"\",\n     \"details\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/google-ad-descriptions-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"google-ad-descriptions-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Google Ad Descriptions V2-Mandatory Validation for details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"name\": \"Writesonic\",\n     \"details\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/google-ad-descriptions-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"google-ad-descriptions-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Google Ad Descriptions V2-Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"name\": \"Writesonic\",\n     \"details\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/google-ad-descriptions-v2?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"google-ad-descriptions-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Google Ad Descriptions V2-Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"name\": \"Writesonic\",\n     \"details\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/google-ad-descriptions-v2?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"google-ad-descriptions-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Google Ad Descriptions V2-Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"name\": \"Writesonic\",\n     \"details\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/google-ad-descriptions-v2?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"google-ad-descriptions-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Google Ad Titles V2",
			"item": [
				{
					"name": "Google Ad Titles V2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"keyword\": \"AI Writer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/google-ad-titles-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"google-ad-titles-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Google Ad Titles V2-Mandatory Validation for company_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"\",\n     \"description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"keyword\": \"AI Writer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/google-ad-titles-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"google-ad-titles-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Google Ad Titles V2-Mandatory Validation for description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"description\": \"\",\n     \"keyword\": \"AI Writer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/google-ad-titles-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"google-ad-titles-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Google Ad Titles V2-Mandatory Validation for keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"keyword\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/google-ad-titles-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"google-ad-titles-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Google Ad Titles V2-Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"keyword\": \"AI Writer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/google-ad-titles-v2?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"google-ad-titles-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Google Ad Titles V2-Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"keyword\": \"AI Writer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/google-ad-titles-v2?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"google-ad-titles-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Google Ad Titles V2-Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"keyword\": \"AI Writer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/google-ad-titles-v2?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"google-ad-titles-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Facebook Ads",
			"item": [
				{
					"name": "Facebook Ads",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"ad_description\");\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"ad_description\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"ad_description\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"ad_description\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"ad_description\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"20% off all plans\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/facebook-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"facebook-ads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Facebook Ads-Mandatory validation for product_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\");\r",
									"});\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"20% off all plans\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/facebook-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"facebook-ads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Facebook Ads-Mandatory validation for product_description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\");\r",
									"});\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"20% off all plans\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/facebook-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"facebook-ads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Facebook Ads-Mandatory validation for promotion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"ad_description\");\r",
									"});\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"ad_description\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"ad_description\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/facebook-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"facebook-ads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Facebook Ads-Mandatory validation for occasion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"ad_description\");\r",
									"});\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"ad_description\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"ad_description\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"\",\n     \"promotion\": \"20% off all plans\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/facebook-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"facebook-ads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Facebook Ads-Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"20% off all plans\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/facebook-ads?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"facebook-ads"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Facebook Ads-Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"20% off all plans\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/facebook-ads?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"facebook-ads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Facebook Ads-Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\",\"type_error.integer\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"20% off all plans\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/facebook-ads?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"facebook-ads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "tweets",
			"item": [
				{
					"name": "tweets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"topic\": \"Artificial Intelligence in Copywriting\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/tweets?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"tweets"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "tweets-Mandatory Validation for topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"topic\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/tweets?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"tweets"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "tweets-Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"topic\": \"Artificial Intelligence in Copywriting\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/tweets?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"tweets"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "tweets-Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"topic\": \"Artificial Intelligence in Copywriting\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/tweets?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"tweets"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "tweets-Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"topic\": \"Artificial Intelligence in Copywriting\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/tweets?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"tweets"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Twitter Threads",
			"item": [
				{
					"name": "Twitter Threads",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"topic\": \"Content marketing tips\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/twitter-threads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"twitter-threads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Twitter Threads-Mandatory Validation for topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"topic\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/twitter-threads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"twitter-threads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Twitter Threads-Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"topic\": \"Content marketing tips\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/twitter-threads?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"twitter-threads"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Twitter Threads-Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"topic\": \"Content marketing tips\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/twitter-threads?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"twitter-threads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Twitter Threads-Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"topic\": \"Content marketing tips\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/twitter-threads?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"twitter-threads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Twitter-threads-v2",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "X-API-KEY",
								"value": "{{X-API-KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"topic\":\"Content marketing tips\"}"
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/twitter-threads?engine={{engine}}&language={{language}}&num_copies=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"twitter-threads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "5"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "LinkedIn Ads",
			"item": [
				{
					"name": "LinkedIn Ads",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"ad_title\",\"ad_description\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"ad_title\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"ad_description\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"ad_title\",\r",
									"                \"ad_description\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"promotion\": \"20% Off with code SONIC20\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/linkedin-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"linkedin-ads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkedIn Ads-Mandatory Validation for promotion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"ad_title\",\"ad_description\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"ad_title\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ad_description\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"ad_title\",\r",
									"        \"ad_description\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"ad_title\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ad_description\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"ad_title\",\r",
									"        \"ad_description\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"promotion\": \"\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/linkedin-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"linkedin-ads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkedIn Ads-Mandatory Validation for target_keywords",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"ad_title\",\"ad_description\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"ad_title\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ad_description\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"ad_title\",\r",
									"        \"ad_description\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"ad_title\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ad_description\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"ad_title\",\r",
									"        \"ad_description\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"promotion\": \"20% Off with code SONIC20\",\n     \"target_keywords\": \"\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/linkedin-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"linkedin-ads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkedIn Ads-Mandatory Validation for product_description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"promotion\": \"20% Off with code SONIC20\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"\",\n     \"product_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/linkedin-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"linkedin-ads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkedIn Ads-Mandatory Validation for product_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"promotion\": \"20% Off with code SONIC20\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/linkedin-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"linkedin-ads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkedIn Ads-Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"promotion\": \"20% Off with code SONIC20\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/linkedin-ads?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"linkedin-ads"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkedIn Ads-Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"promotion\": \"20% Off with code SONIC20\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/linkedin-ads?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"linkedin-ads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkedIn Ads-Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"promotion\": \"20% Off with code SONIC20\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/linkedin-ads?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"linkedin-ads"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Trending Instagram Hashtags",
			"item": [
				{
					"name": "Trending Instagram Hashtags",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"First day of kindergarten for my daughter Ellie. She looks so adorable.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/instagram-hashtags?engine=premium&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"instagram-hashtags"
							],
							"query": [
								{
									"key": "engine",
									"value": "premium"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Trending Instagram Hashtags-Mandatory Validation for description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error:\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/instagram-hashtags?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"instagram-hashtags"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Trending Instagram Hashtags-Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"First day of kindergarten for my daughter Ellie. She looks so adorable.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/instagram-hashtags?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"instagram-hashtags"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Trending Instagram Hashtags-Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"First day of kindergarten for my daughter Ellie. She looks so adorable.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/instagram-hashtags?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"instagram-hashtags"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Trending Instagram Hashtags-Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"First day of kindergarten for my daughter Ellie. She looks so adorable.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/instagram-hashtags?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"instagram-hashtags"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SEO Meta Tags (Homepage)",
			"item": [
				{
					"name": "SEO Meta Tags (Homepage)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"Best Copywriting App\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-home?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-home"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for product_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"Best Copywriting App\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-home?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-home"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for product_description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"\",\n     \"search_term\": \"Best Copywriting App\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-home?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-home"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for search_term",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-home?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-home"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"Best Copywriting App\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-home?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-home"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"Best Copywriting App\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-home?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-home"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"Best Copywriting App\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-home?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-home"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "LinkedIn Posts V2",
			"item": [
				{
					"name": "LinkedIn Posts V2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"instructions\": \"How I used AI writing to increase my landing page's conversion rate\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/linkedin-posts-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"linkedin-posts-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkedIn Posts V2-Mandatory Validation for instructions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"instructions\": \"\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/linkedin-posts-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"linkedin-posts-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkedIn Posts V2-Mandatory Validation for tone_of_voice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"instructions\": \"How I used AI writing to increase my landing page's conversion rate\",\n     \"tone_of_voice\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/linkedin-posts-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"linkedin-posts-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkedIn Posts V2-Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"instructions\": \"How I used AI writing to increase my landing page's conversion rate\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/linkedin-posts-v2?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"linkedin-posts-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkedIn Posts V2-Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"    })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"instructions\": \"How I used AI writing to increase my landing page's conversion rate\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/linkedin-posts-v2?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"linkedin-posts-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "LinkedIn Posts V2-Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"instructions\": \"How I used AI writing to increase my landing page's conversion rate\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/linkedin-posts-v2?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"linkedin-posts-v2"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Quora Answers",
			"item": [
				{
					"name": "Quora Answers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\": \"What are the benefits of almonds ?\",\n     \"info\": \"health benefits of almonds include lower blood sugar levels, reduced blood pressure and lower cholesterol levels.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/quora-answers?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"quora-answers"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\": \"\",\n     \"info\": \"health benefits of almonds include lower blood sugar levels, reduced blood pressure and lower cholesterol levels.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/quora-answers?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"quora-answers"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for Engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\":\"What are the benefits of almonds ?\",\n     \"info\": \"health benefits of almonds include lower blood sugar levels, reduced blood pressure and lower cholesterol levels.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/quora-answers?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"quora-answers"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\":\"What are the benefits of almonds ?\",\n     \"info\": \"health benefits of almonds include lower blood sugar levels, reduced blood pressure and lower cholesterol levels.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/quora-answers?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"quora-answers"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\":\"What are the benefits of almonds ?\",\n     \"info\": \"health benefits of almonds include lower blood sugar levels, reduced blood pressure and lower cholesterol levels.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/quora-answers?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"quora-answers"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{Neil_patels_XPI}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-API-KEY",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"value": "7d89b112-9d32-4823-895b-dbcb4b604503",
			"type": "string",
			"disabled": true
		}
	]
}