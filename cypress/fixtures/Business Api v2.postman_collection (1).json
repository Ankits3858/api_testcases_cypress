{
	"info": {
		"_postman_id": "8e6eb46f-16dd-4c87-9b64-fa083f3bf901",
		"name": "Business Api v2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34880926",
		"_collection_link": "https://speeding-capsule-844584.postman.co/workspace/Team-Workspace~9332a0bd-3e54-4d45-8848-bfa83d77e8e1/collection/25043057-8e6eb46f-16dd-4c87-9b64-fa083f3bf901?action=share&source=collection_link&creator=34880926"
	},
	"item": [
		{
			"name": "AI Article Writers",
			"item": [
				{
					"name": "AI Article Ideas",
					"item": [
						{
							"name": "TC-01-AI Article Ideas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"Artificial Intelligence in Copywriting\",\n     \"primary_keyword\": \"test\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TC-02-AI Article Ideas-Mandatory Validation for Topic field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "1814e9a3-b98c-4366-9e23-f2fc2d6f041e"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"\",\n     \"primary_keyword\": \"AI\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Ideas-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "1814e9a3-b98c-4366-9e23-f2fc2d6f041e"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"Artificial Intelligence in Copywriting\",\n     \"primary_keyword\": \"AI\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-ideas?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Ideas-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "1814e9a3-b98c-4366-9e23-f2fc2d6f041e"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"Artificial Intelligence in Copywriting\",\n     \"primary_keyword\": \"AI\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-ideas?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Ideas-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "1814e9a3-b98c-4366-9e23-f2fc2d6f041e"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"Artificial Intelligence in Copywriting\",\n     \"primary_keyword\": \"AI\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AI Article Intros",
					"item": [
						{
							"name": "AI Article Intros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"// Response data type validation\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-intros?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-intros"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Intros-Mandatory validation for blog_title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-intros?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-intros"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Intros-Mandatory validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-intros?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-intros"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Intros-Mandatory validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-intros?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-intros"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Intros-Mandatory validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-intros?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-intros"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AI Article Outlines",
					"item": [
						{
							"name": "AI Article Outlines",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\",\n    \"blog_intro\": \"The possibilities of artificial intelligence (AI) seem endless. It’s predicted that AI will soon have the ability to write articles, screen movies, and even drive cars on our behalf. But what about copywriting? Can AI be the next copywriter? I’ve spent the past few weeks doing some research and experimenting, and I’ve come up with a few ideas for how AI will change the world of copywriting.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-outlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Outlines-Mandatory validation for blog_title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"\",\n     \"blog_intro\": \"The possibilities of artificial intelligence (AI) seem endless. It’s predicted that AI will soon have the ability to write articles, screen movies, and even drive cars on our behalf. But what about copywriting? Can AI be the next copywriter? I’ve spent the past few weeks doing some research and experimenting, and I’ve come up with a few ideas for how AI will change the world of copywriting.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-outlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Outlines-Mandatory validation for blog_intro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\",\n     \"blog_intro\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-outlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Outlines-Mandatory validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\",\n     \"blog_intro\": \"The possibilities of artificial intelligence (AI) seem endless. It’s predicted that AI will soon have the ability to write articles, screen movies, and even drive cars on our behalf. But what about copywriting? Can AI be the next copywriter? I’ve spent the past few weeks doing some research and experimenting, and I’ve come up with a few ideas for how AI will change the world of copywriting.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-outlines?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Outlines-Mandatory validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\",\n     \"blog_intro\": \"The possibilities of artificial intelligence (AI) seem endless. It’s predicted that AI will soon have the ability to write articles, screen movies, and even drive cars on our behalf. But what about copywriting? Can AI be the next copywriter? I’ve spent the past few weeks doing some research and experimenting, and I’ve come up with a few ideas for how AI will change the world of copywriting.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-outlines?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Outlines-Mandatory validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"blog_title\": \"How Artificial Intelligence Will Change The World Of Copywriting\",\n     \"blog_intro\": \"The possibilities of artificial intelligence (AI) seem endless. It’s predicted that AI will soon have the ability to write articles, screen movies, and even drive cars on our behalf. But what about copywriting? Can AI be the next copywriter? I’ve spent the past few weeks doing some research and experimenting, and I’ve come up with a few ideas for how AI will change the world of copywriting.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/blog-outlines?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"blog-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AI Article Writer 3.0",
					"item": [
						{
							"name": "AI Article Writer 3.0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"article_title\", \"content\", \"article_intro\", \"article_sections\");\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.article_title).to.be.an(\"string\");\r",
											"    pm.expect(jsonData.article_intro).to.be.an(\"string\");\r",
											"    pm.expect(jsonData.article_sections).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"    pm.expect(jsonData.article_title).to.be.an(\"string\");\r",
											"    pm.expect(jsonData.article_intro).to.be.an(\"string\");\r",
											"    pm.expect(jsonData.article_sections).to.be.an(\"array\");\r",
											"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"article_title\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"article_intro\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"article_sections\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"title\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"content\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"title\",\r",
											"            \"content\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"article_title\",\r",
											"    \"article_intro\",\r",
											"    \"article_sections\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"article_sections\": [\n          \"Advantages of establishing human settlements on Mars\"\n     ],\n     \"article_title\": \"Supporting life on Mars is difficult but possible\",\n     \"article_intro\": \"Life on Mars may seem like a distant dream—at least until it's actually possible. The Red Planet has just started to warm up, but increasing land and water temperatures there could keep humans alive for many years. Or at least that's what the latest estimates say. Even with NASA still planning a return to the Moon by 2020, Mars is a far cry from being autonomous self-sustaining society. But what if we could help our Mars friends already on Earth? Could we establish human settlements there as a way to boost local populations and bring us more than just another planet in a system? In this blog post, we take a look at how creating settlements on Mars would be possible. While it might seem like science fiction, the idea of creating colonies on another world doesn't seem so far-fetched these days. And research is only getting started on how such recreations of our past can help mankind conquer fear and depression while also turning back time to save the world...\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/ai-article-writer-v3?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"ai-article-writer-v3"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Writer 3.0-Mandatory validation for article_title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"article_title\",\"article_intro\",\"article_sections\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"article_title\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"article_intro\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"article_sections\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"title\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"content\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"title\",\r",
											"            \"content\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"article_title\",\r",
											"    \"article_intro\",\r",
											"    \"article_sections\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"article_sections\": [\n          \"Advantages of establishing human settlements on Mars\"\n     ],\n     \"article_title\": \"\",\n     \"article_intro\": \"Life on Mars may seem like a distant dream—at least until it's actually possible. The Red Planet has just started to warm up, but increasing land and water temperatures there could keep humans alive for many years. Or at least that's what the latest estimates say. Even with NASA still planning a return to the Moon by 2020, Mars is a far cry from being autonomous self-sustaining society. But what if we could help our Mars friends already on Earth? Could we establish human settlements there as a way to boost local populations and bring us more than just another planet in a system? In this blog post, we take a look at how creating settlements on Mars would be possible. While it might seem like science fiction, the idea of creating colonies on another world doesn't seem so far-fetched these days. And research is only getting started on how such recreations of our past can help mankind conquer fear and depression while also turning back time to save the world...\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/ai-article-writer-v3?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"ai-article-writer-v3"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Writer 3.0-Mandatory validation for article_intro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"article_title\",\"article_intro\",\"article_sections\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"article_title\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"article_intro\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"article_sections\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"title\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"content\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"title\",\r",
											"            \"content\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"article_title\",\r",
											"    \"article_intro\",\r",
											"    \"article_sections\",\r",
											"    \"data\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"article_sections\": [\n          \"Advantages of establishing human settlements on Mars\"\n     ],\n     \"article_title\": \"Supporting life on Mars is difficult but possible\",\n     \"article_intro\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/ai-article-writer-v3?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"ai-article-writer-v3"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Writer 3.0-Mandatory validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"article_sections\": [\n          \"Advantages of establishing human settlements on Mars\"\n     ],\n     \"article_title\": \"Supporting life on Mars is difficult but possible\",\n     \"article_intro\": \"Life on Mars may seem like a distant dream—at least until it's actually possible. The Red Planet has just started to warm up, but increasing land and water temperatures there could keep humans alive for many years. Or at least that's what the latest estimates say. Even with NASA still planning a return to the Moon by 2020, Mars is a far cry from being autonomous self-sustaining society. But what if we could help our Mars friends already on Earth? Could we establish human settlements there as a way to boost local populations and bring us more than just another planet in a system? In this blog post, we take a look at how creating settlements on Mars would be possible. While it might seem like science fiction, the idea of creating colonies on another world doesn't seem so far-fetched these days. And research is only getting started on how such recreations of our past can help mankind conquer fear and depression while also turning back time to save the world...\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/ai-article-writer-v3?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"ai-article-writer-v3"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Writer 3.0-Mandatory validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"article_sections\": [\n          \"Advantages of establishing human settlements on Mars\"\n     ],\n     \"article_title\": \"Supporting life on Mars is difficult but possible\",\n     \"article_intro\": \"Life on Mars may seem like a distant dream—at least until it's actually possible. The Red Planet has just started to warm up, but increasing land and water temperatures there could keep humans alive for many years. Or at least that's what the latest estimates say. Even with NASA still planning a return to the Moon by 2020, Mars is a far cry from being autonomous self-sustaining society. But what if we could help our Mars friends already on Earth? Could we establish human settlements there as a way to boost local populations and bring us more than just another planet in a system? In this blog post, we take a look at how creating settlements on Mars would be possible. While it might seem like science fiction, the idea of creating colonies on another world doesn't seem so far-fetched these days. And research is only getting started on how such recreations of our past can help mankind conquer fear and depression while also turning back time to save the world...\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/ai-article-writer-v3?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"ai-article-writer-v3"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "AI Article Writer 3.0-Mandatory validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"article_sections\": [\n          \"Advantages of establishing human settlements on Mars\"\n     ],\n     \"article_title\": \"Supporting life on Mars is difficult but possible\",\n     \"article_intro\": \"Life on Mars may seem like a distant dream—at least until it's actually possible. The Red Planet has just started to warm up, but increasing land and water temperatures there could keep humans alive for many years. Or at least that's what the latest estimates say. Even with NASA still planning a return to the Moon by 2020, Mars is a far cry from being autonomous self-sustaining society. But what if we could help our Mars friends already on Earth? Could we establish human settlements there as a way to boost local populations and bring us more than just another planet in a system? In this blog post, we take a look at how creating settlements on Mars would be possible. While it might seem like science fiction, the idea of creating colonies on another world doesn't seem so far-fetched these days. And research is only getting started on how such recreations of our past can help mankind conquer fear and depression while also turning back time to save the world...\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/ai-article-writer-v3?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"ai-article-writer-v3"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Article Re Writer",
					"item": [
						{
							"name": "Article ReWriter",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-KEY",
										"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
									},
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "content-type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"link\": \"https://www.bleepingcomputer.com/news/security/suncor-energy-cyberattack-impacts-petro-canada-gas-stations/\"\r\n}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/article-rewriter?engine=premium&num_copies=1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"article-rewriter"
									],
									"query": [
										{
											"key": "engine",
											"value": "premium"
										},
										{
											"key": "num_copies",
											"value": "1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Amazon",
			"item": [
				{
					"name": "Amazon Product Descriptions",
					"item": [
						{
							"name": "Amazon Product Descriptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"product_name\": \"Buddha’s Blend Sachets\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Product Descriptions-Mandatory Validation for product_description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"\",\n     \"product_name\": \"Buddha’s Blend Sachets\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Product Descriptions-Mandatory Validation for product_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"product_name\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Product Descriptions-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"product_name\": \"Buddha’s Blend Sachets\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-descriptions?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Product Descriptions-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"product_name\": \"Buddha’s Blend Sachets\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-descriptions?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Product Descriptions-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"product_name\": \"Buddha’s Blend Sachets\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-descriptions?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Amazon Product Titles",
					"item": [
						{
							"name": "Amazon Product Titles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"target_keywords\": \"White tea, Green tea, Jasmine pearls, White hibiscus blossoms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-titles?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Product Titles-Mandatory Validation for product_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"target_keywords\": \"White tea, Green tea, Jasmine pearls, White hibiscus blossoms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-titles?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Product Titles-Mandatory Validation for product_description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"\",\n     \"target_keywords\": \"White tea, Green tea, Jasmine pearls, White hibiscus blossoms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-titles?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Product Titles-Mandatory Validation for target_keywords",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"target_keywords\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-titles?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Product Titles-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"target_keywords\": \"White tea, Green tea, Jasmine pearls, White hibiscus blossoms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-titles?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Product Titles-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"target_keywords\": \"White tea, Green tea, Jasmine pearls, White hibiscus blossoms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-titles?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Product Titles-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"target_keywords\": \"White tea, Green tea, Jasmine pearls, White hibiscus blossoms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-titles?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Amazon Product Features",
					"item": [
						{
							"name": "Amazon Product Features",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-features?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-features"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Product Features-Mandatory Validation for product_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-features?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-features"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Product Features-Mandatory Validation for product_description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-features?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-features"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Product Features-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-features?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-features"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Product Features-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-features?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-features"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Product Features-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-product-features?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-product-features"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Amazon Sponsored Brand Ads Headline",
					"item": [
						{
							"name": "Amazon Sponsored Brand Ads Headline",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"target_keywords\": \"White tea, Green tea, Jasmine pearls, White hibiscus blossoms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-ad-headlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-ad-headlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Sponsored Brand Ads Headline-Mandatory Validation for product_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"target_keywords\": \"White tea, Green tea, Jasmine pearls, White hibiscus blossoms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-ad-headlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-ad-headlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Sponsored Brand Ads Headline-Mandatory Validation for product_description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"\",\n     \"target_keywords\": \"White tea, Green tea, Jasmine pearls, White hibiscus blossoms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-ad-headlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-ad-headlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Sponsored Brand Ads Headline-Mandatory Validation for target_keywords",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"target_keywords\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-ad-headlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-ad-headlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Sponsored Brand Ads Headline-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"target_keywords\": \"White tea, Green tea, Jasmine pearls, White hibiscus blossoms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-ad-headlines?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-ad-headlines"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Sponsored Brand Ads Headline-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"target_keywords\": \"White tea, Green tea, Jasmine pearls, White hibiscus blossoms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-ad-headlines?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-ad-headlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Amazon Sponsored Brand Ads Headline-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Buddha’s Blend Sachets\",\n     \"product_description\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"target_keywords\": \"White tea, Green tea, Jasmine pearls, White hibiscus blossoms\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/amazon-ad-headlines?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"amazon-ad-headlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{X-API-KEY}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "X-API-KEY",
						"type": "string"
					},
					{
						"key": "in",
						"value": "header",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Emails",
			"item": [
				{
					"name": "Cold Emails V2",
					"item": [
						{
							"name": "Cold Emails V2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"you\": \"Writesonic\",\n     \"to\": \"Jack Doe\",\n     \"goal\": \"Following up on an email we sent earlier\",\n     \"scenario\": \"We sent an email to Jack a week before asking him to try out our writing tools. haven't heard back from him. Send him a follow up email reminding him of how writesonic can help with his business and writing.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/cold-emails-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"cold-emails-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cold Emails V2-Mandatory Validation for you field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"you\": \"\",\n     \"to\": \"Jack Doe\",\n     \"goal\": \"Following up on an email we sent earlier\",\n     \"scenario\": \"We sent an email to Jack a week before asking him to try out our writing tools. haven't heard back from him. Send him a follow up email reminding him of how writesonic can help with his business and writing.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/cold-emails-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"cold-emails-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cold Emails V2-Mandatory Validation for to field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"text\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"text\"\r",
											"      ]\r",
											"    },\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"text\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"text\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"you\": \"Writesonic\",\n     \"to\": \"\",\n     \"goal\": \"Following up on an email we sent earlier\",\n     \"scenario\": \"We sent an email to Jack a week before asking him to try out our writing tools. haven't heard back from him. Send him a follow up email reminding him of how writesonic can help with his business and writing.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/cold-emails-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"cold-emails-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cold Emails V2-Mandatory Validation for goal field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"you\": \"Writesonic\",\n     \"to\": \"Jack Doe\",\n     \"goal\": \"\",\n     \"scenario\": \"We sent an email to Jack a week before asking him to try out our writing tools. haven't heard back from him. Send him a follow up email reminding him of how writesonic can help with his business and writing.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/cold-emails-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"cold-emails-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cold Emails V2-Mandatory Validation for scenario field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"you\": \"Writesonic\",\n     \"to\": \"Jack Doe\",\n     \"goal\": \"Following up on an email we sent earlier\",\n     \"scenario\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/cold-emails-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"cold-emails-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cold Emails V2-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"you\": \"Writesonic\",\n     \"to\": \"Jack Doe\",\n     \"goal\": \"Following up on an email we sent earlier\",\n     \"scenario\": \"We sent an email to Jack a week before asking him to try out our writing tools. haven't heard back from him. Send him a follow up email reminding him of how writesonic can help with his business and writing.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/cold-emails-v2?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"cold-emails-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cold Emails V2-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"you\": \"Writesonic\",\n     \"to\": \"Jack Doe\",\n     \"goal\": \"Following up on an email we sent earlier\",\n     \"scenario\": \"We sent an email to Jack a week before asking him to try out our writing tools. haven't heard back from him. Send him a follow up email reminding him of how writesonic can help with his business and writing.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/cold-emails-v2?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"cold-emails-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Cold Emails V2-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"you\": \"Writesonic\",\n     \"to\": \"Jack Doe\",\n     \"goal\": \"Following up on an email we sent earlier\",\n     \"scenario\": \"We sent an email to Jack a week before asking him to try out our writing tools. haven't heard back from him. Send him a follow up email reminding him of how writesonic can help with his business and writing.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/cold-emails-v2?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"cold-emails-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Emails",
					"item": [
						{
							"name": "Emails",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"key_points\": \"* appreciate the OpenAI team for their amazing product\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/emails?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"emails"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Emails-Mandatory Validation for key_points",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"key_points\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/emails?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"emails"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Emails-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"key_points\": \"* appreciate the OpenAI team for their amazing product\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/emails?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"emails"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Emails-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"key_points\": \"* appreciate the OpenAI team for their amazing product\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/emails?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"emails"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Emails-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"key_points\": \"* appreciate the OpenAI team for their amazing product\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/emails?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"emails"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Emails V2",
					"item": [
						{
							"name": "Emails V2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"recipient\": \"support@writesonic.com\",\n     \"recipient_position\": \"Customer Support\",\n     \"description\": \"we would like to subscribe to writesonic's business API for commerical use\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/emails-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"emails-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Emails V2-Mandatory Validation for recipient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"recipient\": \"\",\n     \"recipient_position\": \"Customer Support\",\n     \"description\": \"we would like to subscribe to writesonic's business API for commerical use\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/emails-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"emails-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Emails V2-Mandatory Validation for recipient_position",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"    pm.test(\"Status code is 400\", function () {\r",
											"        pm.response.to.have.status(400);\r",
											"    });\r",
											"    pm.test(\"Status code name has string\", function () {\r",
											"        pm.response.to.have.status(\"Bad Request\");\r",
											"    });\r",
											"    pm.test(\"Body matches string\", function () {\r",
											"        pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"    });\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"recipient\": \"support@writesonic.com\",\n     \"recipient_position\": \"\",\n     \"description\": \"we would like to subscribe to writesonic's business API for commerical use\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/emails-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"emails-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Emails V2-Mandatory Validation for description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"recipient\": \"support@writesonic.com\",\n     \"recipient_position\": \"Customer Support\",\n     \"description\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/emails-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"emails-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Emails V2-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"recipient\": \"support@writesonic.com\",\n     \"recipient_position\": \"Customer Support\",\n     \"description\": \"we would like to subscribe to writesonic's business API for commerical use\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/emails-v2?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"emails-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Emails V2-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"recipient\": \"support@writesonic.com\",\n     \"recipient_position\": \"Customer Support\",\n     \"description\": \"we would like to subscribe to writesonic's business API for commerical use\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/emails-v2?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"emails-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Emails V2-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"recipient\": \"support@writesonic.com\",\n     \"recipient_position\": \"Customer Support\",\n     \"description\": \"we would like to subscribe to writesonic's business API for commerical use\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/emails-v2?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"emails-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Email Subject Lines",
					"item": [
						{
							"name": "Email Subject Lines",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product\": \"Writesonic's Chrome Extension\",\n     \"description\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/subject-lines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"subject-lines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Email Subject Lines-Mandatory Validation for product",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product\": \"\",\n     \"description\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/subject-lines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"subject-lines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Email Subject Lines-Mandatory Validation for description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product\": \"Writesonic's Chrome Extension\",\n     \"description\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/subject-lines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"subject-lines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Email Subject Lines-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product\": \"Writesonic's Chrome Extension\",\n     \"description\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/subject-lines?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"subject-lines"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Email Subject Lines-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product\": \"Writesonic's Chrome Extension\",\n     \"description\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/subject-lines?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"subject-lines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Email Subject Lines-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product\": \"Writesonic's Chrome Extension\",\n     \"description\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/subject-lines?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"subject-lines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"auth": {
				"type": "apikey",
				"apikey": [
					{
						"key": "value",
						"value": "{{X-API-KEY}}",
						"type": "string"
					},
					{
						"key": "key",
						"value": "X-API-KEY",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Facebook",
			"item": [
				{
					"name": "Facebook Ads",
					"item": [
						{
							"name": "Facebook Ads",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ad_description\");\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"ad_description\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"ad_description\"\r",
											"      ]\r",
											"    },\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"ad_description\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"ad_description\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"20% off all plans\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/facebook-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"facebook-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Facebook Ads-Mandatory validation for product_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\");\r",
											"});\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"object\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"20% off all plans\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/facebook-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"facebook-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Facebook Ads-Mandatory validation for product_description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\");\r",
											"});\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"object\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"20% off all plans\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/facebook-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"facebook-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Facebook Ads-Mandatory validation for promotion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ad_description\");\r",
											"});\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"ad_description\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"ad_description\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/facebook-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"facebook-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Facebook Ads-Mandatory validation for occasion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ad_description\");\r",
											"});\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"ad_description\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"ad_description\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"\",\n     \"promotion\": \"20% off all plans\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/facebook-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"facebook-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Facebook Ads-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"20% off all plans\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/facebook-ads?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"facebook-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Facebook Ads-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"20% off all plans\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/facebook-ads?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"facebook-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Facebook Ads-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\",\"type_error.integer\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"20% off all plans\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/facebook-ads?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"facebook-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Google",
			"item": [
				{
					"name": "Google Ad Descriptions",
					"item": [
						{
							"name": "Google Ad Descriptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"primary_keyword\": \"Best Copywriting App\",\n     \"secondary_keywords\": \"landing page, Google ads, Facebook ads,\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Descriptions-Mandatory Validation for product_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"primary_keyword\": \"Best Copywriting App\",\n     \"secondary_keywords\": \"landing page, Google ads, Facebook ads,\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Descriptions-Mandatory Validation for product_description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"\",\n     \"primary_keyword\": \"Best Copywriting App\",\n     \"secondary_keywords\": \"landing page, Google ads, Facebook ads,\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Descriptions-Mandatory Validation for primary_keyword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"primary_keyword\": \"\",\n     \"secondary_keywords\": \"landing page, Google ads, Facebook ads,\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Descriptions-Mandatory Validation for secondary_keywords",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"primary_keyword\": \"Best Copywriting App\",\n     \"secondary_keywords\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Descriptions-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"primary_keyword\": \"Best Copywriting App\",\n     \"secondary_keywords\": \"landing page, Google ads, Facebook ads,\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-descriptions?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Descriptions-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"primary_keyword\": \"Best Copywriting App\",\n     \"secondary_keywords\": \"landing page, Google ads, Facebook ads,\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-descriptions?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Descriptions-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"primary_keyword\": \"Best Copywriting App\",\n     \"secondary_keywords\": \"landing page, Google ads, Facebook ads,\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-descriptions?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Google Ad Descriptions V2",
					"item": [
						{
							"name": "Google Ad Descriptions V2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"name\": \"Writesonic\",\n     \"details\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-descriptions-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-descriptions-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Descriptions V2-Mandatory Validation for name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"name\": \"\",\n     \"details\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-descriptions-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-descriptions-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Descriptions V2-Mandatory Validation for details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"name\": \"Writesonic\",\n     \"details\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-descriptions-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-descriptions-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Descriptions V2-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"name\": \"Writesonic\",\n     \"details\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-descriptions-v2?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-descriptions-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Descriptions V2-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"name\": \"Writesonic\",\n     \"details\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-descriptions-v2?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-descriptions-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Descriptions V2-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"name\": \"Writesonic\",\n     \"details\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-descriptions-v2?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-descriptions-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Google Ad Titles",
					"item": [
						{
							"name": "Google Ad Titles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"primary_keyword\": \"Best Copywriting App\",\n     \"secondary_keywords\": \"landing page, Google ads, Facebook ads,\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-titles?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Titles-Mandatory Validation for product_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"primary_keyword\": \"Best Copywriting App\",\n     \"secondary_keywords\": \"landing page, Google ads, Facebook ads,\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-titles?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Titles-Mandatory Validation for product_description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"\",\n     \"primary_keyword\": \"Best Copywriting App\",\n     \"secondary_keywords\": \"landing page, Google ads, Facebook ads,\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-titles?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Titles-Mandatory Validation for primary_keyword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"primary_keyword\": \"\",\n     \"secondary_keywords\": \"landing page, Google ads, Facebook ads,\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-titles?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Titles-Mandatory Validation for secondary_keywords",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"primary_keyword\": \"Best Copywriting App\",\n     \"secondary_keywords\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-titles?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Titles-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"primary_keyword\": \"Best Copywriting App\",\n     \"secondary_keywords\": \"landing page, Google ads, Facebook ads,\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-titles?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Titles-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"primary_keyword\": \"Best Copywriting App\",\n     \"secondary_keywords\": \"landing page, Google ads, Facebook ads,\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-titles?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Titles-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"primary_keyword\": \"Best Copywriting App\",\n     \"secondary_keywords\": \"landing page, Google ads, Facebook ads,\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-titles?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Google Ad Titles V2",
					"item": [
						{
							"name": "Google Ad Titles V2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"keyword\": \"AI Writer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-titles-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-titles-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Titles V2-Mandatory Validation for company_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"company_name\": \"\",\n     \"description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"keyword\": \"AI Writer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-titles-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-titles-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Titles V2-Mandatory Validation for description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"description\": \"\",\n     \"keyword\": \"AI Writer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-titles-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-titles-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Titles V2-Mandatory Validation for keyword",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"keyword\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-titles-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-titles-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Titles V2-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"keyword\": \"AI Writer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-titles-v2?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-titles-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Titles V2-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"keyword\": \"AI Writer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-titles-v2?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-titles-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ad Titles V2-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"keyword\": \"AI Writer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ad-titles-v2?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ad-titles-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Google Ads",
					"item": [
						{
							"name": "Google Ads",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ad_title\",\"ad_description\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"ad_title\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"ad_description\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"ad_title\",\r",
											"                \"ad_description\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"search_term\": \"Best Copywriting App\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ads-Mandatory Validation for product_description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"\",\n     \"product_name\": \"Writesonic\",\n     \"search_term\": \"Best Copywriting App\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ads-Mandatory Validation for product_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"\",\n     \"search_term\": \"Best Copywriting App\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ads-Mandatory Validation for search_term",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"search_term\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ads-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"search_term\": \"Best Copywriting App\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ads?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ads-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"search_term\": \"Best Copywriting App\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ads?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Google Ads-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"search_term\": \"Best Copywriting App\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/google-ads?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"google-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "LinkedIn",
			"item": [
				{
					"name": "LinkedIn Ad Descriptions",
					"item": [
						{
							"name": "LinkedIn Ad Descriptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"promotion\": \"20% Off with code SONIC20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ad-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ad-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ad Descriptions-Mandatory Validation for product_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"promotion\": \"20% Off with code SONIC20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ad-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ad-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ad Descriptions-Mandatory Validation for product_description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"promotion\": \"20% Off with code SONIC20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ad-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ad-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ad Descriptions-Mandatory Validation for target_keywords",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"text\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"text\"\r",
											"      ]\r",
											"    },\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"text\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"text\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"\",\n     \"promotion\": \"20% Off with code SONIC20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ad-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ad-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ad Descriptions-Mandatory Validation for promotion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"text\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"text\"\r",
											"      ]\r",
											"    },\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"text\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"text\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"promotion\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ad-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ad-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ad Descriptions-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"promotion\": \"20% Off with code SONIC20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ad-descriptions?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ad-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ad Descriptions-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"promotion\": \"20% Off with code SONIC20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ad-descriptions?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ad-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ad Descriptions-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"promotion\": \"20% Off with code SONIC20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ad-descriptions?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ad-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LinkedIn Ad Headlines",
					"item": [
						{
							"name": "LinkedIn Ad Headlines",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"promotion\": \"20% Off with code SONIC20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ad-headlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ad-headlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ad Headlines-Mandatory Validation for product_description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"\",\n     \"product_name\": \"Writesonic\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"promotion\": \"20% Off with code SONIC20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ad-headlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ad-headlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ad Headlines-Mandatory Validation for product_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"promotion\": \"20% Off with code SONIC20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ad-headlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ad-headlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ad Headlines-Mandatory Validation for target_keywords",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"target_keywords\": \"\",\n     \"promotion\": \"20% Off with code SONIC20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ad-headlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ad-headlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ad Headlines-Mandatory Validation for promotion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"text\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"text\"\r",
											"      ]\r",
											"    },\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"text\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"text\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"promotion\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ad-headlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ad-headlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ad Headlines-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"promotion\": \"20% Off with code SONIC20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ad-headlines?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ad-headlines"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ad Headlines-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"promotion\": \"20% Off with code SONIC20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ad-headlines?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ad-headlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ad Headlines-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"promotion\": \"20% Off with code SONIC20\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ad-headlines?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ad-headlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LinkedIn Ads",
					"item": [
						{
							"name": "LinkedIn Ads",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ad_title\",\"ad_description\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"ad_title\": {\r",
											"                    \"type\": \"string\"\r",
											"                },\r",
											"                \"ad_description\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"ad_title\",\r",
											"                \"ad_description\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"promotion\": \"20% Off with code SONIC20\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ads-Mandatory Validation for promotion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ad_title\",\"ad_description\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema ={\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"ad_title\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"ad_description\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"ad_title\",\r",
											"        \"ad_description\"\r",
											"      ]\r",
											"    },\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"ad_title\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"ad_description\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"ad_title\",\r",
											"        \"ad_description\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"promotion\": \"\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ads-Mandatory Validation for target_keywords",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"ad_title\",\"ad_description\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema ={\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"ad_title\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"ad_description\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"ad_title\",\r",
											"        \"ad_description\"\r",
											"      ]\r",
											"    },\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"ad_title\": {\r",
											"          \"type\": \"string\"\r",
											"        },\r",
											"        \"ad_description\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"ad_title\",\r",
											"        \"ad_description\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"promotion\": \"20% Off with code SONIC20\",\n     \"target_keywords\": \"\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ads-Mandatory Validation for product_description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"promotion\": \"20% Off with code SONIC20\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"\",\n     \"product_name\": \"Writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ads-Mandatory Validation for product_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"promotion\": \"20% Off with code SONIC20\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ads-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"promotion\": \"20% Off with code SONIC20\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ads?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ads-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"promotion\": \"20% Off with code SONIC20\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ads?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Ads-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"promotion\": \"20% Off with code SONIC20\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-ads?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-ads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "LinkedIn Posts V2",
					"item": [
						{
							"name": "LinkedIn Posts V2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"instructions\": \"How I used AI writing to increase my landing page's conversion rate\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-posts-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-posts-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Posts V2-Mandatory Validation for instructions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"instructions\": \"\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-posts-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-posts-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Posts V2-Mandatory Validation for tone_of_voice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"instructions\": \"How I used AI writing to increase my landing page's conversion rate\",\n     \"tone_of_voice\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-posts-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-posts-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Posts V2-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"instructions\": \"How I used AI writing to increase my landing page's conversion rate\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-posts-v2?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-posts-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Posts V2-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"    })"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"instructions\": \"How I used AI writing to increase my landing page's conversion rate\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-posts-v2?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-posts-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "LinkedIn Posts V2-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"instructions\": \"How I used AI writing to increase my landing page's conversion rate\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-posts-v2?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-posts-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Short LinkedIn Posts",
					"item": [
						{
							"name": "Short LinkedIn Posts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-posts?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-posts"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Short LinkedIn Posts-Mandatory Validation for target_keywords",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"text\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"text\"\r",
											"      ]\r",
											"    },\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"text\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"text\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"target_keywords\": \"\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-posts?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-posts"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Short LinkedIn Posts-Mandatory Validation for product_description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"\",\n     \"product_name\": \"Writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-posts?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-posts"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Short LinkedIn Posts-Mandatory Validation for product_name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-posts?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-posts"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Short LinkedIn Posts-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-posts?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-posts"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Short LinkedIn Posts-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-posts?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-posts"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Short LinkedIn Posts-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/linkedin-posts?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"linkedin-posts"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Instagram",
			"item": [
				{
					"name": "Instagram Captions",
					"item": [
						{
							"name": "Instagram Captions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/instagram-captions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"instagram-captions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Instagram Captions-Mandatory Validation for description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/instagram-captions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"instagram-captions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Instagram Captions-Mandatory Validation for tone_of_voice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"tone_of_voice\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/instagram-captions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"instagram-captions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Instagram Captions-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/instagram-captions?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"instagram-captions"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Instagram Captions-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/instagram-captions?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"instagram-captions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Instagram Captions-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/instagram-captions?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"instagram-captions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Trending Instagram Hashtags",
					"item": [
						{
							"name": "Trending Instagram Hashtags",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"array\",\r",
											"  \"items\": [\r",
											"    {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"text\": {\r",
											"          \"type\": \"string\"\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"text\"\r",
											"      ]\r",
											"    }\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"First day of kindergarten for my daughter Ellie. She looks so adorable.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/instagram-hashtags?engine=premium&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"instagram-hashtags"
									],
									"query": [
										{
											"key": "engine",
											"value": "premium"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Trending Instagram Hashtags-Mandatory Validation for description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error:\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/instagram-hashtags?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"instagram-hashtags"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Trending Instagram Hashtags-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"First day of kindergarten for my daughter Ellie. She looks so adorable.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/instagram-hashtags?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"instagram-hashtags"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Trending Instagram Hashtags-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"First day of kindergarten for my daughter Ellie. She looks so adorable.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/instagram-hashtags?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"instagram-hashtags"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Trending Instagram Hashtags-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"First day of kindergarten for my daughter Ellie. She looks so adorable.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/instagram-hashtags?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"instagram-hashtags"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "TikTok",
			"item": [
				{
					"name": "TikTok Video Hooks",
					"item": [
						{
							"name": "TikTok Video Hooks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/tiktok-hooks?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"tiktok-hooks"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TikTok Video Hooks-Mandatory Validation for description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/tiktok-hooks?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"tiktok-hooks"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TikTok Video Hooks-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/tiktok-hooks?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"tiktok-hooks"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TikTok Video Hooks-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/tiktok-hooks?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"tiktok-hooks"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TikTok Video Hooks-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/tiktok-hooks?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"tiktok-hooks"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TikTok Video Scripts",
					"item": [
						{
							"name": "TikTok Video Scripts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"How to bake a apple pie for father's day\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/tiktok-scripts?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"tiktok-scripts"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TikTok Video Scripts-Mandatory Validation for description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/tiktok-hooks?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"tiktok-hooks"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TikTok Video Scripts-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"How to bake a apple pie for father's day\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/tiktok-hooks?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"tiktok-hooks"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TikTok Video Scripts-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"How to bake a apple pie for father's day\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/tiktok-hooks?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"tiktok-hooks"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "TikTok Video Scripts-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"description\": \"How to bake a apple pie for father's day\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/tiktok-hooks?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"tiktok-hooks"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Twitter",
			"item": [
				{
					"name": "tweets",
					"item": [
						{
							"name": "tweets",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"Artificial Intelligence in Copywriting\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/tweets?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"tweets"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "tweets-Mandatory Validation for topic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/tweets?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"tweets"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "tweets-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"Artificial Intelligence in Copywriting\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/tweets?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"tweets"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "tweets-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"Artificial Intelligence in Copywriting\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/tweets?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"tweets"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "tweets-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"Artificial Intelligence in Copywriting\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/tweets?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"tweets"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Twitter Threads",
					"item": [
						{
							"name": "Twitter Threads",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"Content marketing tips\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/twitter-threads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"twitter-threads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Twitter Threads-Mandatory Validation for topic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/twitter-threads?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"twitter-threads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Twitter Threads-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"Content marketing tips\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/twitter-threads?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"twitter-threads"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Twitter Threads-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"Content marketing tips\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/twitter-threads?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"twitter-threads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Twitter Threads-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"topic\": \"Content marketing tips\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/twitter-threads?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"twitter-threads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Twitter-threads-v2",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "application/json"
									},
									{
										"key": "content-type",
										"value": "application/json"
									},
									{
										"key": "X-API-KEY",
										"value": "{{X-API-KEY}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"topic\":\"Content marketing tips\"}"
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/twitter-threads?engine={{engine}}&language={{language}}&num_copies=5",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"twitter-threads"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "5"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Youtube",
			"item": [
				{
					"name": "YouTube Ideas",
					"item": [
						{
							"name": "YouTube Ideas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_topic\": \"AI in real life\",\n     \"search_term\": \"artificial intelligence\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Ideas-Mandatory Validation for video_topic",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_topic\": \"\",\n     \"search_term\": \"artificial intelligence\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Ideas-Mandatory Validation for search_term",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_topic\": \"AI in real life\",\n     \"search_term\": \"\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Ideas-Mandatory Validation for tone_of_voice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_topic\": \"AI in real life\",\n     \"search_term\": \"artificial intelligence\",\n     \"tone_of_voice\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Ideas-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_topic\": \"AI in real life\",\n     \"search_term\": \"artificial intelligence\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-ideas?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Ideas-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_topic\": \"AI in real life\",\n     \"search_term\": \"artificial intelligence\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-ideas?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Ideas-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\",\"type_error.integer\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_topic\": \"AI in real life\",\n     \"search_term\": \"artificial intelligence\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-ideas?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "YouTube Intros",
					"item": [
						{
							"name": "YouTube Intros",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-intros?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-intros"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Intros-Mandatory Validation for tone_of_voice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk\",\n     \"tone_of_voice\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-intros?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-intros"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Intros-Mandatory Validation for search_term",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-intros?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-intros"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Intros-Mandatory Validatrion for video_title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"\",\n     \"search_term\": \"Elon Musk\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-intros?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-intros"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Intros-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-ideas?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Intros-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-ideas?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Intros-Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\",\"type_error.integer\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-ideas?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-ideas"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "YouTube Intros V2",
					"item": [
						{
							"name": "YouTube Intros V2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"hook\": \"Stuck into writer's block ? writesonic is for you\",\n     \"tone\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-intros-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-intros-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Intros V2-Mandatory Validatrion for video_title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"\",\n     \"search_term\": \"Elon Musk\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-intros-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-intros-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Intros V2-Mandatory Validation for hook",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"hook\": \"\",\n     \"tone\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-intros-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-intros-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Intros V2-Mandatory validation for tone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"hook\": \"Stuck into writer's block ? writesonic is for you\",\n     \"tone\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-intros-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-intros-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Intros V2-Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"hook\": \"Stuck into writer's block ? writesonic is for you\",\n     \"tone\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-intros-v2?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-intros-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "YouTube Intros V2-Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"hook\": \"Stuck into writer's block ? writesonic is for you\",\n     \"tone\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-intros-v2?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-intros-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\",\"type_error.integer\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"hook\": \"Stuck into writer's block ? writesonic is for you\",\n     \"tone\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-intros-v2?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-intros-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "YouTube Descriptions",
					"item": [
						{
							"name": "YouTube Descriptions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk about sleep\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"20% off all plans\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-descriptions?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"20% off all plans\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-descriptions?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\",\"type_error.integer\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"occasion\": \"Black Friday\",\n     \"promotion\": \"20% off all plans\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-descriptions?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for video_title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"\",\n     \"search_term\": \"Elon Musk about sleep\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for search_term",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for tone_of_voice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk about sleep\",\n     \"tone_of_voice\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-descriptions"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "YouTube Descriptions V2",
					"item": [
						{
							"name": "YouTube Descriptions V2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"keywords\": \"AI, Launch , writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-descriptions-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-descriptions-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for video_title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"\",\n     \"keywords\": \"AI, Launch , writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-descriptions-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-descriptions-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for keywords",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"keywords\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-descriptions-v2?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-descriptions-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"keywords\": \"AI, Launch , writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-descriptions-v2?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-descriptions-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"keywords\": \"AI, Launch , writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-descriptions-v2?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-descriptions-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"keywords\": \"AI, Launch , writesonic\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-descriptions-v2?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-descriptions-v2"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Youtube Hooks",
					"item": [
						{
							"name": "Youtube Hooks",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"tone\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-hooks?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-hooks"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for video_title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"\",\n     \"tone\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-hooks?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-hooks"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for tone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"tone\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-hooks?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-hooks"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"tone\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-hooks?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-hooks"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"tone\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-hooks?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-hooks"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\",\"type_error.integer\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"Launch of Writesonic’s chrome extension that lets anyone rephrase, expand and shorten their content within seconds.\",\n     \"tone\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-hooks?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-hooks"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "YouTube Outlines",
					"item": [
						{
							"name": "YouTube Outlines",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk about sleep\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-outlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for video_title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"\",\n     \"search_term\": \"Elon Musk about sleep\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-outlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for search_term",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-outlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for tone_of_voice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk about sleep\",\n     \"tone_of_voice\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-outlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk about sleep\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-outlines?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk about sleep\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-outlines?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_title\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk about sleep\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-outlines?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-outlines"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "YouTube Titles",
					"item": [
						{
							"name": "YouTube Titles",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"text\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"array\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"    \"type\": \"array\",\r",
											"    \"items\": [\r",
											"        {\r",
											"            \"type\": \"object\",\r",
											"            \"properties\": {\r",
											"                \"text\": {\r",
											"                    \"type\": \"string\"\r",
											"                }\r",
											"            },\r",
											"            \"required\": [\r",
											"                \"text\"\r",
											"            ]\r",
											"        }\r",
											"    ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_description\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk about sleep\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-titles?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for video_description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_description\": \"\",\n     \"search_term\": \"Elon Musk about sleep\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-titles?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for search_term",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_description\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-titles?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for tone_of_voice",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
											"});\r",
											"\r",
											"// Response data type validation\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Test data type of the responsse\", () => {\r",
											"    pm.expect(jsonData).to.be.an(\"object\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_description\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk about sleep\",\n     \"tone_of_voice\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-titles?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for engine",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
											"});\r",
											"\r",
											"// Schema validation\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_description\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk about sleep\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-titles?engine=&language={{language}}&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": ""
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for language",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_description\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk about sleep\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-titles?engine={{engine}}&language=&num_copies={{num_copies}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": ""
										},
										{
											"key": "num_copies",
											"value": "{{num_copies}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Mandatory Validation for  num_copies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 422\", function () {\r",
											"    pm.response.to.have.status(422);\r",
											"});\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
											"});\r",
											"//Json schema\r",
											"const jsonData = pm.response.json();\r",
											"var schema = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"detail\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"loc\": {\r",
											"              \"type\": \"array\",\r",
											"              \"items\": [\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              ]\r",
											"            },\r",
											"            \"msg\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"type\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"loc\",\r",
											"            \"msg\",\r",
											"            \"type\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"detail\"\r",
											"  ]\r",
											"}\r",
											"pm.test('schema is valid', function () {\r",
											"\r",
											"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n     \"video_description\": \"How To Spend Every Night - Elon Musk\",\n     \"search_term\": \"Elon Musk about sleep\",\n     \"tone_of_voice\": \"excited\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/v2/business/content/youtube-titles?engine={{engine}}&language={{language}}&num_copies=",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"v2",
										"business",
										"content",
										"youtube-titles"
									],
									"query": [
										{
											"key": "engine",
											"value": "{{engine}}"
										},
										{
											"key": "language",
											"value": "{{language}}"
										},
										{
											"key": "num_copies",
											"value": ""
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ChatSonic",
			"item": [
				{
					"name": "ChatSonic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\",\"image_urls\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"image_urls\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"image_urls\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enable_memory\": true,\n    \"enable_google_results\": true,\n    \"input_text\": \"How is the cm of telangana\",\n    \"history_data\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/chatsonic?engine={{engine}}&language=en",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"chatsonic"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "en"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for enable_memory",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enable_memory\": \"\",\n    \"enable_google_results\": true,\n    \"input_text\": \"What is his favorite sports team?\",\n    \"history_data\": [\n        {\n            \"is_sent\": true,\n            \"message\": \"Who is the President of the United States?\"\n        },\n        {\n            \"is_sent\": false,\n            \"message\": \"The 46th and current President of the United States is Joseph R. Biden, Jr., who was sworn in on January 20, 2021.\"\n        },\n        {\n            \"is_sent\": true,\n            \"message\": \"When was he born?\"\n        },\n        {\n            \"is_sent\": false,\n            \"message\": \"Joseph Robinette Biden Jr. was born on November 20, 1942, in Scranton, Pennsylvania.\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/chatsonic?language={{language}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"chatsonic"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}",
									"disabled": true
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for enable_google_results",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enable_memory\": true,\n    \"enable_google_results\": \"\",\n    \"input_text\": \"What is his favorite sports team?\",\n    \"history_data\": [\n        {\n            \"is_sent\": true,\n            \"message\": \"Who is the President of the United States?\"\n        },\n        {\n            \"is_sent\": false,\n            \"message\": \"The 46th and current President of the United States is Joseph R. Biden, Jr., who was sworn in on January 20, 2021.\"\n        },\n        {\n            \"is_sent\": true,\n            \"message\": \"When was he born?\"\n        },\n        {\n            \"is_sent\": false,\n            \"message\": \"Joseph Robinette Biden Jr. was born on November 20, 1942, in Scranton, Pennsylvania.\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/chatsonic?language={{language}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"chatsonic"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}",
									"disabled": true
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for input_text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"message\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"image_urls\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"message\",\r",
									"    \"image_urls\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enable_memory\": true,\n    \"enable_google_results\": true,\n    \"input_text\": \"\",\n    \"history_data\": [\n        {\n            \"is_sent\": true,\n            \"message\": \"Who is the President of the United States?\"\n        },\n        {\n            \"is_sent\": false,\n            \"message\": \"The 46th and current President of the United States is Joseph R. Biden, Jr., who was sworn in on January 20, 2021.\"\n        },\n        {\n            \"is_sent\": true,\n            \"message\": \"When was he born?\"\n        },\n        {\n            \"is_sent\": false,\n            \"message\": \"Joseph Robinette Biden Jr. was born on November 20, 1942, in Scranton, Pennsylvania.\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/chatsonic?language={{language}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"chatsonic"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}",
									"disabled": true
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"enable_memory\": true,\n    \"enable_google_results\": true,\n    \"input_text\": \"What is his favorite sports team?\",\n    \"history_data\": [\n        {\n            \"is_sent\": true,\n            \"message\": \"Who is the President of the United States?\"\n        },\n        {\n            \"is_sent\": false,\n            \"message\": \"The 46th and current President of the United States is Joseph R. Biden, Jr., who was sworn in on January 20, 2021.\"\n        },\n        {\n            \"is_sent\": true,\n            \"message\": \"When was he born?\"\n        },\n        {\n            \"is_sent\": false,\n            \"message\": \"Joseph Robinette Biden Jr. was born on November 20, 1942, in Scranton, Pennsylvania.\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/chatsonic?language=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"chatsonic"
							],
							"query": [
								{
									"key": "language",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AIDA Framework",
			"item": [
				{
					"name": "AIDA Framework",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/aida?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"aida"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for product_description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/aida?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"aida"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/aida?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"aida"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/aida?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"aida"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/aida?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"aida"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Analogy Maker",
			"item": [
				{
					"name": "Analogy Maker",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/analogies?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"analogies"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/analogies?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"analogies"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/analogies?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"analogies"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/analogies?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"analogies"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/analogies?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"analogies"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ans-my-ques",
			"item": [
				{
					"name": "ans-my-ques",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\": \"What are the benefits of almonds ?\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/ans-my-ques?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"ans-my-ques"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/ans-my-ques?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"ans-my-ques"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\": \"What are the benefits of almonds ?\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/ans-my-ques?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"ans-my-ques"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\": \"What are the benefits of almonds ?\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/ans-my-ques?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"ans-my-ques"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\": \"What are the benefits of almonds ?\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/ans-my-ques?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"ans-my-ques"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "App and SMS Notifications",
			"item": [
				{
					"name": "App and SMS Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"Get daily meals delivered to you in quickest time.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/app-notifications?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"app-notifications"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/app-notifications?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"app-notifications"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"Get daily meals delivered to you in quickest time.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/app-notifications?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"app-notifications"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"Get daily meals delivered to you in quickest time.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/app-notifications?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"app-notifications"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"Get daily meals delivered to you in quickest time.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/app-notifications?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"app-notifications"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bullet Point Answers",
			"item": [
				{
					"name": "Bullet Point Answers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\": \"What are some advantages of AI?\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/bulletpoint-answers?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"bulletpoint-answers"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/bulletpoint-answers?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"bulletpoint-answers"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\": \"What are some advantages of AI?\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/bulletpoint-answers?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"bulletpoint-answers"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\": \"What are some advantages of AI?\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/bulletpoint-answers?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"bulletpoint-answers"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\": \"What are some advantages of AI?\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/bulletpoint-answers?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"bulletpoint-answers"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Call to Action",
			"item": [
				{
					"name": "Call to Action",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"A company that specializes in consumer electronics.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/call-to-action?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"call-to-action"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/call-to-action?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"call-to-action"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"A company that specializes in consumer electronics.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/call-to-action?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"call-to-action"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"A company that specializes in consumer electronics.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/call-to-action?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"call-to-action"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"A company that specializes in consumer electronics.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/call-to-action?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"call-to-action"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Company Mission",
			"item": [
				{
					"name": "Company Mission",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"company_description\": \"Writesonic is an AI copywriting startup. helps compose high-performing landing pages, product descriptions, ads, and blog posts in seconds. 1000+ 5-star reviews.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/company-mission?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"company-mission"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for company_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"\",\n     \"company_description\": \"Writesonic is an AI copywriting startup. helps compose high-performing landing pages, product descriptions, ads, and blog posts in seconds. 1000+ 5-star reviews.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/company-mission?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"company-mission"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for company_description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"company_description\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/company-mission?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"company-mission"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"company_description\": \"Writesonic is an AI copywriting startup. helps compose high-performing landing pages, product descriptions, ads, and blog posts in seconds. 1000+ 5-star reviews.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/company-mission?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"company-mission"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"company_description\": \"Writesonic is an AI copywriting startup. helps compose high-performing landing pages, product descriptions, ads, and blog posts in seconds. 1000+ 5-star reviews.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/company-mission?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"company-mission"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"company_description\": \"Writesonic is an AI copywriting startup. helps compose high-performing landing pages, product descriptions, ads, and blog posts in seconds. 1000+ 5-star reviews.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/company-mission?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"company-mission"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Company Vision",
			"item": [
				{
					"name": "Company Vision",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"company_description\": \"Writesonic is an AI copywriting startup. helps compose high-performing landing pages, product descriptions, ads, and blog posts in seconds. 1000+ 5-star reviews.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/company-vision?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"company-vision"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for company_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"\",\n     \"company_description\": \"Writesonic is an AI copywriting startup. helps compose high-performing landing pages, product descriptions, ads, and blog posts in seconds. 1000+ 5-star reviews.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/company-vision?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"company-vision"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for company_description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"company_description\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/company-vision?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"company-vision"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"company_description\": \"Writesonic is an AI copywriting startup. helps compose high-performing landing pages, product descriptions, ads, and blog posts in seconds. 1000+ 5-star reviews.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/company-vision?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"company-vision"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"company_description\": \"Writesonic is an AI copywriting startup. helps compose high-performing landing pages, product descriptions, ads, and blog posts in seconds. 1000+ 5-star reviews.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/company-vision?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"company-vision"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"company_name\": \"Writesonic\",\n     \"company_description\": \"Writesonic is an AI copywriting startup. helps compose high-performing landing pages, product descriptions, ads, and blog posts in seconds. 1000+ 5-star reviews.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/company-vision?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"company-vision"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Conclusion Writer",
			"item": [
				{
					"name": "Conclusion Writer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article\": \"AI will be a big part of the future and will have a huge impact on our lives. Many companies are already investing in AI, and many other companies will follow suit. AI can automate many tasks that humans do, freeing up people to focus on other things. AI has the potential to be used for a variety of purposes, such as helping astronauts travel to Mars or automating financial transactions. While AI is still in its infancy, it holds a lot of promise for the future.\\nIf you want to learn more about AI, check out some of these resources:\\n-Artificial Intelligence by Peter Norvig:A book that discusses AI from a technical perspective.\\n-What is Artificial Intelligence?:An article that provides an overview of AI.\\n-Stanford University's Artificial Intelligence Page:A page with information about AI research at Stanford University\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/conclusion-writer?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"conclusion-writer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for article",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/conclusion-writer?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"conclusion-writer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article\": \"AI will be a big part of the future and will have a huge impact on our lives. Many companies are already investing in AI, and many other companies will follow suit. AI can automate many tasks that humans do, freeing up people to focus on other things. AI has the potential to be used for a variety of purposes, such as helping astronauts travel to Mars or automating financial transactions. While AI is still in its infancy, it holds a lot of promise for the future.\\nIf you want to learn more about AI, check out some of these resources:\\n-Artificial Intelligence by Peter Norvig:A book that discusses AI from a technical perspective.\\n-What is Artificial Intelligence?:An article that provides an overview of AI.\\n-Stanford University's Artificial Intelligence Page:A page with information about AI research at Stanford University\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/conclusion-writer?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"conclusion-writer"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article\": \"AI will be a big part of the future and will have a huge impact on our lives. Many companies are already investing in AI, and many other companies will follow suit. AI can automate many tasks that humans do, freeing up people to focus on other things. AI has the potential to be used for a variety of purposes, such as helping astronauts travel to Mars or automating financial transactions. While AI is still in its infancy, it holds a lot of promise for the future.\\nIf you want to learn more about AI, check out some of these resources:\\n-Artificial Intelligence by Peter Norvig:A book that discusses AI from a technical perspective.\\n-What is Artificial Intelligence?:An article that provides an overview of AI.\\n-Stanford University's Artificial Intelligence Page:A page with information about AI research at Stanford University\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/conclusion-writer?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"conclusion-writer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article\": \"AI will be a big part of the future and will have a huge impact on our lives. Many companies are already investing in AI, and many other companies will follow suit. AI can automate many tasks that humans do, freeing up people to focus on other things. AI has the potential to be used for a variety of purposes, such as helping astronauts travel to Mars or automating financial transactions. While AI is still in its infancy, it holds a lot of promise for the future.\\nIf you want to learn more about AI, check out some of these resources:\\n-Artificial Intelligence by Peter Norvig:A book that discusses AI from a technical perspective.\\n-What is Artificial Intelligence?:An article that provides an overview of AI.\\n-Stanford University's Artificial Intelligence Page:A page with information about AI research at Stanford University\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/conclusion-writer?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"conclusion-writer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Content Shorten",
			"item": [
				{
					"name": "Content Shorten",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content_to_shorten\": \"We're pretty sure we found the key to achieving nirvana, and it starts with this fresh, delicate mix of white and green tea.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/content-shorten?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"content-shorten"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for content_to_shorten",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content_to_shorten\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/content-shorten?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"content-shorten"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content_to_shorten\": \"We're pretty sure we found the key to achieving nirvana, and it starts with this fresh, delicate mix of white and green tea.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/content-shorten?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"content-shorten"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content_to_shorten\": \"We're pretty sure we found the key to achieving nirvana, and it starts with this fresh, delicate mix of white and green tea.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/content-shorten?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"content-shorten"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content_to_shorten\": \"We're pretty sure we found the key to achieving nirvana, and it starts with this fresh, delicate mix of white and green tea.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/content-shorten?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"content-shorten"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Definition",
			"item": [
				{
					"name": "Definition",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"keyword\": \"Bouyancy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/define-this?engine={{engine}}&language={{language}}&num_copies=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"define-this"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"keyword\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/define-this?engine={{engine}}&language={{language}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"define-this"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"keyword\": \"Bouyancy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/define-this?engine=&language={{language}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"define-this"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"keyword\": \"Bouyancy\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/define-this?engine={{engine}}&language=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"define-this"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Landing Page Headlines",
			"item": [
				{
					"name": "Landing Page Headlines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-page-headlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-page-headlines"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for Engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-page-headlines?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-page-headlines"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-page-headlines?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-page-headlines"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"detail\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": [\r",
									"                {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"loc\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": [\r",
									"                                {\r",
									"                                    \"type\": \"string\"\r",
									"                                },\r",
									"                                {\r",
									"                                    \"type\": \"string\"\r",
									"                                }\r",
									"                            ]\r",
									"                        },\r",
									"                        \"msg\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"type\": {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"loc\",\r",
									"                        \"msg\",\r",
									"                        \"type\"\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-page-headlines?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-page-headlines"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for product_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\", \"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"detail\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-page-headlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-page-headlines"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for product_description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\", \"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"detail\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"writesonic\",\n     \"product_description\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-page-headlines?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-page-headlines"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Feature to Benefit",
			"item": [
				{
					"name": "Feature to Benefit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"feature\": \"write high-converting landing pages within seconds\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/feature-to-benefits?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"feature-to-benefits"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for product_description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\", \"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"detail\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"\",\n     \"feature\": \"write high-converting landing pages within seconds\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/feature-to-benefits?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"feature-to-benefits"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for feature",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\", \"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"detail\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"feature\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/feature-to-benefits?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"feature-to-benefits"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"detail\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": [\r",
									"                {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"loc\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": [\r",
									"                                {\r",
									"                                    \"type\": \"string\"\r",
									"                                },\r",
									"                                {\r",
									"                                    \"type\": \"string\"\r",
									"                                }\r",
									"                            ]\r",
									"                        },\r",
									"                        \"msg\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"type\": {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"loc\",\r",
									"                        \"msg\",\r",
									"                        \"type\"\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-page-headlines?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-page-headlines"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-page-headlines?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-page-headlines"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for Engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-page-headlines?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-page-headlines"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Growth Ideas",
			"item": [
				{
					"name": "Growth Ideas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"target_audience\": \"marketing agencies\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/growth-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"growth-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for product_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"target_audience\": \"marketing agencies\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/growth-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"growth-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for product_description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"target_audience\": \"marketing agencies\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/growth-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"growth-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for target_keywords",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"\",\n     \"target_audience\": \"marketing agencies\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/growth-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"growth-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for target_audience",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"target_audience\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/growth-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"growth-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"target_audience\": \"marketing agencies\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/growth-ideas?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"growth-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"target_audience\": \"marketing agencies\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/growth-ideas?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"growth-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\",\n     \"target_audience\": \"marketing agencies\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/growth-ideas?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"growth-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Instant Article Writer",
			"item": [
				{
					"name": "Instant Article Writer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"article_intro\", \"article_outlines\", \"article\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"article_intro\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"article_outlines\": {\r",
									"                    \"type\": \"array\",\r",
									"                    \"items\": [\r",
									"                        {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    ]\r",
									"                },\r",
									"                \"article\": {\r",
									"                    \"type\": \"array\",\r",
									"                    \"items\": [\r",
									"                        {\r",
									"                            \"type\": \"object\",\r",
									"                            \"properties\": {\r",
									"                                \"title\": {\r",
									"                                    \"type\": \"string\"\r",
									"                                },\r",
									"                                \"content\": {\r",
									"                                    \"type\": \"string\"\r",
									"                                }\r",
									"                            },\r",
									"                            \"required\": [\r",
									"                                \"title\",\r",
									"                                \"content\"\r",
									"                            ]\r",
									"                        }\r",
									"                    ]\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"article_intro\",\r",
									"                \"article_outlines\",\r",
									"                \"article\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article_title\": \"Artificial Intelligence in Copywriting\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/instant-article-writer?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"instant-article-writer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory valiadtion for article_title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article_title\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/instant-article-writer?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"instant-article-writer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"detail\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": [\r",
									"                {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"loc\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": [\r",
									"                                {\r",
									"                                    \"type\": \"string\"\r",
									"                                },\r",
									"                                {\r",
									"                                    \"type\": \"string\"\r",
									"                                }\r",
									"                            ]\r",
									"                        },\r",
									"                        \"msg\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"type\": {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"loc\",\r",
									"                        \"msg\",\r",
									"                        \"type\"\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article_title\": \"Artificial Intelligence in Copywriting\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/instant-article-writer?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"instant-article-writer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article_title\": \"Artificial Intelligence in Copywriting\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/instant-article-writer?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"instant-article-writer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for Engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article_title\": \"Artificial Intelligence in Copywriting\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/instant-article-writer?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"instant-article-writer"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Keyword Extractor (English Only)",
			"item": [
				{
					"name": "Keyword Extractor (English Only)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/keyword-extract?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"keyword-extract"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/keyword-extract?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"keyword-extract"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"detail\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/keyword-extract?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"keyword-extract"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"detail\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/keyword-extract?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"keyword-extract"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"detail\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": [\r",
									"                {\r",
									"                    \"type\": \"object\",\r",
									"                    \"properties\": {\r",
									"                        \"loc\": {\r",
									"                            \"type\": \"array\",\r",
									"                            \"items\": [\r",
									"                                {\r",
									"                                    \"type\": \"string\"\r",
									"                                },\r",
									"                                {\r",
									"                                    \"type\": \"string\"\r",
									"                                }\r",
									"                            ]\r",
									"                        },\r",
									"                        \"msg\": {\r",
									"                            \"type\": \"string\"\r",
									"                        },\r",
									"                        \"type\": {\r",
									"                            \"type\": \"string\"\r",
									"                        }\r",
									"                    },\r",
									"                    \"required\": [\r",
									"                        \"loc\",\r",
									"                        \"msg\",\r",
									"                        \"type\"\r",
									"                    ]\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"detail\"\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/keyword-extract?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"keyword-extract"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Listicle Ideas",
			"item": [
				{
					"name": "Listicle Ideas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"search_term\": \"AI in copywriting\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/listicle-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"listicle-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for search_term",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"search_term\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/listicle-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"listicle-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"search_term\": \"AI in copywriting\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/listicle-ideas?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"listicle-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"search_term\": \"AI in copywriting\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/listicle-ideas?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"listicle-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"search_term\": \"AI in copywriting\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/listicle-ideas?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"listicle-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Landing Pages",
			"item": [
				{
					"name": "Landing Pages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"title\", \"subtitle\", \"main_feature_title\", \"main_feature_subtitle\", \"feature_1_title\", \"feature_1_subtitle\",\"cta\",\"button\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"title\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"subtitle\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"main_feature_title\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"main_feature_subtitle\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"feature_1_title\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"feature_1_subtitle\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"feature_2_title\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"feature_2_subtitle\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"feature_3_title\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"feature_3_subtitle\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"cta\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"button\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"title\",\r",
									"        \"subtitle\",\r",
									"        \"main_feature_title\",\r",
									"        \"main_feature_subtitle\",\r",
									"        \"feature_1_title\",\r",
									"        \"feature_1_subtitle\",\r",
									"        \"feature_2_title\",\r",
									"        \"feature_2_subtitle\",\r",
									"        \"feature_3_title\",\r",
									"        \"feature_3_subtitle\",\r",
									"        \"cta\",\r",
									"        \"button\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Webflow\",\n     \"product_description\": \"Webflow_is_an_in_build_and_launch_responsive_websites_visually\",\n     \"feature_1\": \"Build production-ready experiences without coding\",\n     \"feature_2\": \"Deploy on a hosting network that scales with your business\",\n     \"feature_3\": \"Create, launch, and iterate on new marketing campaigns\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-pages?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-pages"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for Engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Webflow\",\n     \"product_description\": \"Webflow_is_an_in_build_and_launch_responsive_websites_visually\",\n     \"feature_1\": \"Build production-ready experiences without coding\",\n     \"feature_2\": \"Deploy on a hosting network that scales with your business\",\n     \"feature_3\": \"Create, launch, and iterate on new marketing campaigns\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-pages?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-pages"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Webflow\",\n     \"product_description\": \"Webflow_is_an_in_build_and_launch_responsive_websites_visually\",\n     \"feature_1\": \"Build production-ready experiences without coding\",\n     \"feature_2\": \"Deploy on a hosting network that scales with your business\",\n     \"feature_3\": \"Create, launch, and iterate on new marketing campaigns\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-pages?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-pages"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Webflow\",\n     \"product_description\": \"Webflow_is_an_in_build_and_launch_responsive_websites_visually\",\n     \"feature_1\": \"Build production-ready experiences without coding\",\n     \"feature_2\": \"Deploy on a hosting network that scales with your business\",\n     \"feature_3\": \"Create, launch, and iterate on new marketing campaigns\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-pages?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-pages"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for product_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"\",\n     \"product_description\": \"Webflow_is_an_in_build_and_launch_responsive_websites_visually\",\n     \"feature_1\": \"Build production-ready experiences without coding\",\n     \"feature_2\": \"Deploy on a hosting network that scales with your business\",\n     \"feature_3\": \"Create, launch, and iterate on new marketing campaigns\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-pages?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-pages"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for product_description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Webflow\",\n     \"product_description\": \"\",\n     \"feature_1\": \"Build production-ready experiences without coding\",\n     \"feature_2\": \"Deploy on a hosting network that scales with your business\",\n     \"feature_3\": \"Create, launch, and iterate on new marketing campaigns\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-pages?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-pages"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for feature_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Webflow\",\n     \"product_description\": \"Webflow_is_an_in_build_and_launch_responsive_websites_visually\",\n     \"feature_1\": \"\",\n     \"feature_2\": \"Deploy on a hosting network that scales with your business\",\n     \"feature_3\": \"Create, launch, and iterate on new marketing campaigns\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-pages?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-pages"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for feature_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Webflow\",\n     \"product_description\": \"Webflow_is_an_in_build_and_launch_responsive_websites_visually\",\n     \"feature_1\": \"Build production-ready experiences without coding\",\n     \"feature_2\": \"\",\n     \"feature_3\": \"Create, launch, and iterate on new marketing campaigns\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-pages?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-pages"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for feature_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Webflow\",\n     \"product_description\": \"Webflow_is_an_in_build_and_launch_responsive_websites_visually\",\n     \"feature_1\": \"Build production-ready experiences without coding\",\n     \"feature_2\": \"Create, launch, and iterate on new marketing campaigns\",\n     \"feature_3\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/landing-pages?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"landing-pages"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pain-Agitate-Solutions",
			"item": [
				{
					"name": "Pain-Agitate-Solutions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/pas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"pas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for product_description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"\",\n     \"product_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/pas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"pas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for product_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/pas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"pas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/pas?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"pas"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/pas?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"pas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/pas?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"pas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Paragraph Writer",
			"item": [
				{
					"name": "Paragraph Writer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"tone_of_voice\": \"Professional\",\n     \"paragraph_title\": \"AI and Future\",\n     \"keywords\": \"AI\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/paragraph-writer?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"paragraph-writer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for tone_of_voice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"Array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"tone_of_voice\": \"\",\n     \"paragraph_title\": \"AI and Future\",\n     \"keywords\": \"AI\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/paragraph-writer?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"paragraph-writer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for paragraph_title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"tone_of_voice\": \"Professional\",\n     \"paragraph_title\": \"\",\n     \"keywords\": \"AI\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/paragraph-writer?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"paragraph-writer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"tone_of_voice\": \"Professional\",\n     \"paragraph_title\": \"AI and Future\",\n     \"keywords\": \"AI\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/paragraph-writer?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"paragraph-writer"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"tone_of_voice\": \"Professional\",\n     \"paragraph_title\": \"AI and Future\",\n     \"keywords\": \"AI\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/paragraph-writer?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"paragraph-writer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"tone_of_voice\": \"Professional\",\n     \"paragraph_title\": \"AI and Future\",\n     \"keywords\": \"AI\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/paragraph-writer?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"paragraph-writer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Passive to Active Voice",
			"item": [
				{
					"name": "Passive to Active Voice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"sentence\": \"The contract was cancelled by the studio managers. Hidden behind their stoic lawyers the messages were passed down. Words like ‘iron clad’ and ‘final notice’ were thrust into their faces. Voices were raised. Emotions were not kept in check. Fury rose unbridled.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/active-voice?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"active-voice"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for sentence",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"sentence\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/active-voice?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"active-voice"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"sentence\": \"The contract was cancelled by the studio managers. Hidden behind their stoic lawyers the messages were passed down. Words like ‘iron clad’ and ‘final notice’ were thrust into their faces. Voices were raised. Emotions were not kept in check. Fury rose unbridled.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/active-voice?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"active-voice"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"sentence\": \"The contract was cancelled by the studio managers. Hidden behind their stoic lawyers the messages were passed down. Words like ‘iron clad’ and ‘final notice’ were thrust into their faces. Voices were raised. Emotions were not kept in check. Fury rose unbridled.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/active-voice?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"active-voice"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"sentence\": \"The contract was cancelled by the studio managers. Hidden behind their stoic lawyers the messages were passed down. Words like ‘iron clad’ and ‘final notice’ were thrust into their faces. Voices were raised. Emotions were not kept in check. Fury rose unbridled.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/active-voice?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"active-voice"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Personal Bios",
			"item": [
				{
					"name": "Personal Bios",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"name\": \"Elon Musk\",\n     \"personal_info\": \"Co-founder of PayPal and Tesla. Founder of SpaceX, Neuralink, and The Boring Company. Born and raised in South Africa. Graduated from University of Pennsylvania in physics.\",\n     \"tone_of_voice\": \"professional\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/personal-bios?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"personal-bios"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"name\": \"\",\n     \"personal_info\": \"Co-founder of PayPal and Tesla. Founder of SpaceX, Neuralink, and The Boring Company. Born and raised in South Africa. Graduated from University of Pennsylvania in physics.\",\n     \"tone_of_voice\": \"professional\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/personal-bios?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"personal-bios"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for personal_info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"name\": \"Elon Musk\",\n     \"personal_info\": \"\",\n     \"tone_of_voice\": \"professional\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/personal-bios?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"personal-bios"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for tone_of_voice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"name\": \"Elon Musk\",\n     \"personal_info\": \"Co-founder of PayPal and Tesla. Founder of SpaceX, Neuralink, and The Boring Company. Born and raised in South Africa. Graduated from University of Pennsylvania in physics.\",\n     \"tone_of_voice\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/personal-bios?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"personal-bios"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"name\": \"Elon Musk\",\n     \"personal_info\": \"Co-founder of PayPal and Tesla. Founder of SpaceX, Neuralink, and The Boring Company. Born and raised in South Africa. Graduated from University of Pennsylvania in physics.\",\n     \"tone_of_voice\": \"professional\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/personal-bios?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"personal-bios"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"name\": \"Elon Musk\",\n     \"personal_info\": \"Co-founder of PayPal and Tesla. Founder of SpaceX, Neuralink, and The Boring Company. Born and raised in South Africa. Graduated from University of Pennsylvania in physics.\",\n     \"tone_of_voice\": \"professional\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/personal-bios?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"personal-bios"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"name\": \"Elon Musk\",\n     \"personal_info\": \"Co-founder of PayPal and Tesla. Founder of SpaceX, Neuralink, and The Boring Company. Born and raised in South Africa. Graduated from University of Pennsylvania in physics.\",\n     \"tone_of_voice\": \"professional\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/personal-bios?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"personal-bios"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product Descriptions",
			"item": [
				{
					"name": "Product Descriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"tone_of_voice\": \"professional\",\n     \"product_name\": \"Buddha's Tea\",\n     \"product_characteristics\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"keywords\": \"New\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/product-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"product-descriptions"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for tone_of_voice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"tone_of_voice\": \"\",\n     \"product_name\": \"Buddha's Tea\",\n     \"product_characteristics\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"keywords\": \"New\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/product-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"product-descriptions"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for product_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"tone_of_voice\": \"professional\",\n     \"product_name\": \"\",\n     \"product_characteristics\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"keywords\": \"New\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/product-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"product-descriptions"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for product_characteristics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"tone_of_voice\": \"professional\",\n     \"product_name\": \"Buddha's Tea\",\n     \"product_characteristics\": \"\",\n     \"keywords\": \"New\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/product-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"product-descriptions"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for keywords",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"tone_of_voice\": \"professional\",\n     \"product_name\": \"Buddha's Tea\",\n     \"product_characteristics\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"keywords\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/product-descriptions?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"product-descriptions"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"tone_of_voice\": \"professional\",\n     \"product_name\": \"Buddha's Tea\",\n     \"product_characteristics\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"keywords\": \"New\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/product-descriptions?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"product-descriptions"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"tone_of_voice\": \"professional\",\n     \"product_name\": \"Buddha's Tea\",\n     \"product_characteristics\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"keywords\": \"New\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/product-descriptions?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"product-descriptions"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"tone_of_voice\": \"professional\",\n     \"product_name\": \"Buddha's Tea\",\n     \"product_characteristics\": \"Buddha’s Blend Sachets are a fresh, delicate mix of white and green tea with jasmine pearls for a sweet floral perfume. Just sit back, relax and take a sip. Pure bliss.\",\n     \"keywords\": \"New\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/product-descriptions?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"product-descriptions"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pros and Cons",
			"item": [
				{
					"name": "Pros and Cons",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"pros\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"pros\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"cons\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"pros\",\r",
									"                \"cons\"\r",
									"            ]\r",
									"        },\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"pros\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"cons\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"pros\",\r",
									"                \"cons\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"paragraph\": \"AI copywriting tool that makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/pros-and-cons?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"pros-and-cons"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for paragraph",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"paragraph\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/pros-and-cons?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"pros-and-cons"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for Engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"paragraph\": \"AI copywriting tool that makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/pros-and-cons?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"pros-and-cons"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"paragraph\": \"AI copywriting tool that makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/pros-and-cons?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"pros-and-cons"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"paragraph\": \"AI copywriting tool that makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/pros-and-cons?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"pros-and-cons"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Quora Answers",
			"item": [
				{
					"name": "Quora Answers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\": \"What are the benefits of almonds ?\",\n     \"info\": \"health benefits of almonds include lower blood sugar levels, reduced blood pressure and lower cholesterol levels.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/quora-answers?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"quora-answers"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\": \"\",\n     \"info\": \"health benefits of almonds include lower blood sugar levels, reduced blood pressure and lower cholesterol levels.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/quora-answers?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"quora-answers"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for Engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\":\"What are the benefits of almonds ?\",\n     \"info\": \"health benefits of almonds include lower blood sugar levels, reduced blood pressure and lower cholesterol levels.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/quora-answers?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"quora-answers"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\":\"What are the benefits of almonds ?\",\n     \"info\": \"health benefits of almonds include lower blood sugar levels, reduced blood pressure and lower cholesterol levels.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/quora-answers?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"quora-answers"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"question\":\"What are the benefits of almonds ?\",\n     \"info\": \"health benefits of almonds include lower blood sugar levels, reduced blood pressure and lower cholesterol levels.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/quora-answers?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"quora-answers"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Questions",
			"item": [
				{
					"name": "Questions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"paragraph\": \"The combination of AI and human intelligence will lead to the development of sophisticated cybersecurity innovations in the future. AI will enable an efficient battle against the rising cyberattacks and crimes. AI has a lot to offer to the transportation and manufacturing sectors.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/question-generation?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"question-generation"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for paragraph",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"paragraph\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/question-generation?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"question-generation"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for Engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"paragraph\": \"The combination of AI and human intelligence will lead to the development of sophisticated cybersecurity innovations in the future. AI will enable an efficient battle against the rising cyberattacks and crimes. AI has a lot to offer to the transportation and manufacturing sectors.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/question-generation?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"question-generation"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"paragraph\": \"The combination of AI and human intelligence will lead to the development of sophisticated cybersecurity innovations in the future. AI will enable an efficient battle against the rising cyberattacks and crimes. AI has a lot to offer to the transportation and manufacturing sectors.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/question-generation?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"question-generation"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"paragraph\": \"The combination of AI and human intelligence will lead to the development of sophisticated cybersecurity innovations in the future. AI will enable an efficient battle against the rising cyberattacks and crimes. AI has a lot to offer to the transportation and manufacturing sectors.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/question-generation?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"question-generation"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product Names",
			"item": [
				{
					"name": "Product Names",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/product-names?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"product-names"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for product_description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"\",\n     \"target_keywords\": \"landing page, Google ads, Facebook ads,\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/product-names?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"product-names"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for target_keywords",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/product-names?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"product-names"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/product-names?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"product-names"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/product-names?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"product-names"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"target_keywords\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/product-names?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"product-names"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Real estate listing descriptions",
			"item": [
				{
					"name": "Real estate listing descriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"type\": \"Tudor style bungalow\",\n     \"price\": \"850,000 GBP\",\n     \"location\": \"Tobermory Scotland\",\n     \"floor_area\": \"3000 sq. foot\",\n     \"bedroom\": \"3 bedrooms with fireplaces, attached bathrooms, master bedroom has fresco style paintings and a walk-in closet with wood detailing\",\n     \"kitchen\": \"marble countertop, latest electric chimney\",\n     \"bathroom\": \"luxury fittings:bathtubs, showers, basins\",\n     \"additional_features\": \"dining hall has 10 seater table and oil paintings, walled lawn in the back, landscaped, flowers and vegetable garden, Scottish highlands.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/real-estate-listing?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"real-estate-listing"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "mandatory validation for type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"type\": \"\",\n     \"price\": \"850,000 GBP\",\n     \"location\": \"Tobermory Scotland\",\n     \"floor_area\": \"3000 sq. foot\",\n     \"bedroom\": \"3 bedrooms with fireplaces, attached bathrooms, master bedroom has fresco style paintings and a walk-in closet with wood detailing\",\n     \"kitchen\": \"marble countertop, latest electric chimney\",\n     \"bathroom\": \"luxury fittings:bathtubs, showers, basins\",\n     \"additional_features\": \"dining hall has 10 seater table and oil paintings, walled lawn in the back, landscaped, flowers and vegetable garden, Scottish highlands.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/real-estate-listing?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"real-estate-listing"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "mandatory validation for price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"type\": \"Tudor style bungalow\",\n     \"price\": \"\",\n     \"location\": \"Tobermory Scotland\",\n     \"floor_area\": \"3000 sq. foot\",\n     \"bedroom\": \"3 bedrooms with fireplaces, attached bathrooms, master bedroom has fresco style paintings and a walk-in closet with wood detailing\",\n     \"kitchen\": \"marble countertop, latest electric chimney\",\n     \"bathroom\": \"luxury fittings:bathtubs, showers, basins\",\n     \"additional_features\": \"dining hall has 10 seater table and oil paintings, walled lawn in the back, landscaped, flowers and vegetable garden, Scottish highlands.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/real-estate-listing?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"real-estate-listing"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "mandatory validation for location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"type\": \"Tudor style bungalow\",\n     \"price\": \"850,000 GBP\",\n     \"location\": \"\",\n     \"floor_area\": \"3000 sq. foot\",\n     \"bedroom\": \"3 bedrooms with fireplaces, attached bathrooms, master bedroom has fresco style paintings and a walk-in closet with wood detailing\",\n     \"kitchen\": \"marble countertop, latest electric chimney\",\n     \"bathroom\": \"luxury fittings:bathtubs, showers, basins\",\n     \"additional_features\": \"dining hall has 10 seater table and oil paintings, walled lawn in the back, landscaped, flowers and vegetable garden, Scottish highlands.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/real-estate-listing?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"real-estate-listing"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "mandatory validation for Engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"type\": \"Tudor style bungalow\",\n     \"price\": \"850,000 GBP\",\n     \"location\": \"Tobermory Scotland\",\n     \"floor_area\": \"3000 sq. foot\",\n     \"bedroom\": \"3 bedrooms with fireplaces, attached bathrooms, master bedroom has fresco style paintings and a walk-in closet with wood detailing\",\n     \"kitchen\": \"marble countertop, latest electric chimney\",\n     \"bathroom\": \"luxury fittings:bathtubs, showers, basins\",\n     \"additional_features\": \"dining hall has 10 seater table and oil paintings, walled lawn in the back, landscaped, flowers and vegetable garden, Scottish highlands.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/real-estate-listing?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"real-estate-listing"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "mandatory validation for Language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"type\": \"Tudor style bungalow\",\n     \"price\": \"850,000 GBP\",\n     \"location\": \"Tobermory Scotland\",\n     \"floor_area\": \"3000 sq. foot\",\n     \"bedroom\": \"3 bedrooms with fireplaces, attached bathrooms, master bedroom has fresco style paintings and a walk-in closet with wood detailing\",\n     \"kitchen\": \"marble countertop, latest electric chimney\",\n     \"bathroom\": \"luxury fittings:bathtubs, showers, basins\",\n     \"additional_features\": \"dining hall has 10 seater table and oil paintings, walled lawn in the back, landscaped, flowers and vegetable garden, Scottish highlands.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/real-estate-listing?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"real-estate-listing"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "mandatory validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"type\": \"Tudor style bungalow\",\n     \"price\": \"850,000 GBP\",\n     \"location\": \"Tobermory Scotland\",\n     \"floor_area\": \"3000 sq. foot\",\n     \"bedroom\": \"3 bedrooms with fireplaces, attached bathrooms, master bedroom has fresco style paintings and a walk-in closet with wood detailing\",\n     \"kitchen\": \"marble countertop, latest electric chimney\",\n     \"bathroom\": \"luxury fittings:bathtubs, showers, basins\",\n     \"additional_features\": \"dining hall has 10 seater table and oil paintings, walled lawn in the back, landscaped, flowers and vegetable garden, Scottish highlands.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/real-estate-listing?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"real-estate-listing"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Review Generator",
			"item": [
				{
					"name": "Review Generator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Natural Kitchens\",\n     \"experience\": \"Positive\",\n     \"description\": \"Good quality fruits and vegies with longer shelf life. Great service from their side.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/review-generator?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"review-generator"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for product_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"\",\n     \"experience\": \"Positive\",\n     \"description\": \"Good quality fruits and vegies with longer shelf life. Great service from their side.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/review-generator?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"review-generator"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for experience",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Natural Kitchens\",\n     \"experience\": \"\",\n     \"description\": \"Good quality fruits and vegies with longer shelf life. Great service from their side.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/review-generator?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"review-generator"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Natural Kitchens\",\n     \"experience\": \"Positive\",\n     \"description\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/review-generator?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"review-generator"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Natural Kitchens\",\n     \"experience\": \"Positive\",\n     \"description\": \"Good quality fruits and vegies with longer shelf life. Great service from their side.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/review-generator?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"review-generator"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for langauge",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Natural Kitchens\",\n     \"experience\": \"Positive\",\n     \"description\": \"Good quality fruits and vegies with longer shelf life. Great service from their side.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/review-generator?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"review-generator"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Natural Kitchens\",\n     \"experience\": \"Positive\",\n     \"description\": \"Good quality fruits and vegies with longer shelf life. Great service from their side.\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/review-generator?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"review-generator"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Review Responder",
			"item": [
				{
					"name": "Review Responder",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"review\": \"I recently came across Writesonic and I was blown away by its AI content generation tool. I think it's a huge lifesaver for freelancers and agency owners like me. I got to finish articles with minimal edits within 10-15 mins while it usually took me over 1 hour to write one from scratch.\",\n     \"type\": \"Positive\",\n     \"company\": \"Writesonic\",\n     \"contact\": \"support@writesonic.com\",\n     \"user\": \"Alex\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/review-responses?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"review-responses"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"review\": \"\",\n     \"type\": \"Positive\",\n     \"company\": \"Writesonic\",\n     \"contact\": \"support@writesonic.com\",\n     \"user\": \"Alex\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/review-responses?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"review-responses"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"review\": \"I recently came across Writesonic and I was blown away by its AI content generation tool. I think it's a huge lifesaver for freelancers and agency owners like me. I got to finish articles with minimal edits within 10-15 mins while it usually took me over 1 hour to write one from scratch.\",\n     \"type\": \"\",\n     \"company\": \"Writesonic\",\n     \"contact\": \"support@writesonic.com\",\n     \"user\": \"Alex\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/review-responses?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"review-responses"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for company",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"review\": \"I recently came across Writesonic and I was blown away by its AI content generation tool. I think it's a huge lifesaver for freelancers and agency owners like me. I got to finish articles with minimal edits within 10-15 mins while it usually took me over 1 hour to write one from scratch.\",\n     \"type\": \"Positive\",\n     \"company\": \"\",\n     \"contact\": \"support@writesonic.com\",\n     \"user\": \"Alex\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/review-responses?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"review-responses"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for contact",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"review\": \"I recently came across Writesonic and I was blown away by its AI content generation tool. I think it's a huge lifesaver for freelancers and agency owners like me. I got to finish articles with minimal edits within 10-15 mins while it usually took me over 1 hour to write one from scratch.\",\n     \"type\": \"Positive\",\n     \"company\": \"Writesonic\",\n     \"contact\": \"\",\n     \"user\": \"Alex\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/review-responses?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"review-responses"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"review\": \"I recently came across Writesonic and I was blown away by its AI content generation tool. I think it's a huge lifesaver for freelancers and agency owners like me. I got to finish articles with minimal edits within 10-15 mins while it usually took me over 1 hour to write one from scratch.\",\n     \"type\": \"Positive\",\n     \"company\": \"Writesonic\",\n     \"contact\": \"support@writesonic.com\",\n     \"user\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/review-responses?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"review-responses"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"review\": \"I recently came across Writesonic and I was blown away by its AI content generation tool. I think it's a huge lifesaver for freelancers and agency owners like me. I got to finish articles with minimal edits within 10-15 mins while it usually took me over 1 hour to write one from scratch.\",\n     \"type\": \"Positive\",\n     \"company\": \"Writesonic\",\n     \"contact\": \"support@writesonic.com\",\n     \"user\": \"Alex\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/review-responses?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"review-responses"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"review\": \"I recently came across Writesonic and I was blown away by its AI content generation tool. I think it's a huge lifesaver for freelancers and agency owners like me. I got to finish articles with minimal edits within 10-15 mins while it usually took me over 1 hour to write one from scratch.\",\n     \"type\": \"Positive\",\n     \"company\": \"Writesonic\",\n     \"contact\": \"support@writesonic.com\",\n     \"user\": \"Alex\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/review-responses?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"review-responses"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"review\": \"I recently came across Writesonic and I was blown away by its AI content generation tool. I think it's a huge lifesaver for freelancers and agency owners like me. I got to finish articles with minimal edits within 10-15 mins while it usually took me over 1 hour to write one from scratch.\",\n     \"type\": \"Positive\",\n     \"company\": \"Writesonic\",\n     \"contact\": \"support@writesonic.com\",\n     \"user\": \"Alex\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/review-responses?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"review-responses"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rewrite With Keywords",
			"item": [
				{
					"name": "Rewrite With Keywords",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article\": \"Remove the friction from your morning by preparing the night before. Simple preparations like setting up your first work task and putting out the ingredients for a nutritious breakfast can go a long way.\",\n     \"keywords\": \"healthy breakfast tip\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/rewrite-with-keywords?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"rewrite-with-keywords"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for article",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article\": \"\",\n     \"keywords\": \"healthy breakfast tip\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/rewrite-with-keywords?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"rewrite-with-keywords"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for keywords",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article\": \"Remove the friction from your morning by preparing the night before. Simple preparations like setting up your first work task and putting out the ingredients for a nutritious breakfast can go a long way.\",\n     \"keywords\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/rewrite-with-keywords?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"rewrite-with-keywords"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article\": \"Remove the friction from your morning by preparing the night before. Simple preparations like setting up your first work task and putting out the ingredients for a nutritious breakfast can go a long way.\",\n     \"keywords\": \"healthy breakfast tip\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/rewrite-with-keywords?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"rewrite-with-keywords"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article\": \"Remove the friction from your morning by preparing the night before. Simple preparations like setting up your first work task and putting out the ingredients for a nutritious breakfast can go a long way.\",\n     \"keywords\": \"healthy breakfast tip\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/rewrite-with-keywords?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"rewrite-with-keywords"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article\": \"Remove the friction from your morning by preparing the night before. Simple preparations like setting up your first work task and putting out the ingredients for a nutritious breakfast can go a long way.\",\n     \"keywords\": \"healthy breakfast tip\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/rewrite-with-keywords?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"rewrite-with-keywords"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sentence Expander",
			"item": [
				{
					"name": "Sentence Expander",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content_to_expand\": \"Copywriting is hard.\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/sentence-expand?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"sentence-expand"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for content_to_expand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content_to_expand\": \"\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/sentence-expand?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"sentence-expand"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for tone_of_voice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content_to_expand\": \"Copywriting is hard.\",\n     \"tone_of_voice\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/sentence-expand?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"sentence-expand"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content_to_expand\": \"Copywriting is hard.\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/sentence-expand?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"sentence-expand"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content_to_expand\": \"Copywriting is hard.\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/sentence-expand?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"sentence-expand"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content_to_expand\": \"Copywriting is hard.\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/sentence-expand?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"sentence-expand"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SEO Meta Tags (Blog Post)",
			"item": [
				{
					"name": "SEO Meta Tags (Blog Post)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_description\": \"Your personal brand is your reputation and how people perceive you. What you say and do is part of the brand. Your brand identity is the sum of your personal brand and the perception of your company. It helps people understand who you are and what you have to offer. But how do you build a strong brand identity?Here are four steps to help you do that.\",\n     \"blog_title\": \"The 4 Steps To Building A Strong Personal Brand Identity\",\n     \"search_term\": \"How to build a personal brand\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-blog?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-blog"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for blog_description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_description\": \"\",\n     \"blog_title\": \"The 4 Steps To Building A Strong Personal Brand Identity\",\n     \"search_term\": \"How to build a personal brand\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-blog?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-blog"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for blog_title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_description\": \"Your personal brand is your reputation and how people perceive you. What you say and do is part of the brand. Your brand identity is the sum of your personal brand and the perception of your company. It helps people understand who you are and what you have to offer. But how do you build a strong brand identity?Here are four steps to help you do that.\",\n     \"blog_title\": \"\",\n     \"search_term\": \"How to build a personal brand\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-blog?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-blog"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for search_term",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_description\": \"Your personal brand is your reputation and how people perceive you. What you say and do is part of the brand. Your brand identity is the sum of your personal brand and the perception of your company. It helps people understand who you are and what you have to offer. But how do you build a strong brand identity?Here are four steps to help you do that.\",\n     \"blog_title\": \"The 4 Steps To Building A Strong Personal Brand Identity\",\n     \"search_term\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-blog?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-blog"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_description\": \"Your personal brand is your reputation and how people perceive you. What you say and do is part of the brand. Your brand identity is the sum of your personal brand and the perception of your company. It helps people understand who you are and what you have to offer. But how do you build a strong brand identity?Here are four steps to help you do that.\",\n     \"blog_title\": \"The 4 Steps To Building A Strong Personal Brand Identity\",\n     \"search_term\": \"How to build a personal brand\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-blog?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-blog"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_description\": \"Your personal brand is your reputation and how people perceive you. What you say and do is part of the brand. Your brand identity is the sum of your personal brand and the perception of your company. It helps people understand who you are and what you have to offer. But how do you build a strong brand identity?Here are four steps to help you do that.\",\n     \"blog_title\": \"The 4 Steps To Building A Strong Personal Brand Identity\",\n     \"search_term\": \"How to build a personal brand\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-blog?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-blog"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"blog_description\": \"Your personal brand is your reputation and how people perceive you. What you say and do is part of the brand. Your brand identity is the sum of your personal brand and the perception of your company. It helps people understand who you are and what you have to offer. But how do you build a strong brand identity?Here are four steps to help you do that.\",\n     \"blog_title\": \"The 4 Steps To Building A Strong Personal Brand Identity\",\n     \"search_term\": \"How to build a personal brand\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-blog?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-blog"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SEO Meta Tags (Homepage)",
			"item": [
				{
					"name": "SEO Meta Tags (Homepage)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"Best Copywriting App\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-home?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-home"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for product_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"Best Copywriting App\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-home?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-home"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for product_description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"\",\n     \"search_term\": \"Best Copywriting App\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-home?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-home"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for search_term",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-home?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-home"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"Best Copywriting App\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-home?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-home"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"Best Copywriting App\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-home?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-home"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"Writesonic\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"Best Copywriting App\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-home?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-home"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SEO Meta Tags (Product Page)",
			"item": [
				{
					"name": "SEO Meta Tags (Product Page)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"AI Assistant\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"Best Copywriting App\",\n     \"company_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-prod?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-prod"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for product_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"Best Copywriting App\",\n     \"company_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-prod?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-prod"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for product_description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"AI Assistant\",\n     \"product_description\": \"\",\n     \"search_term\": \"Best Copywriting App\",\n     \"company_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-prod?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-prod"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for search_term",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"AI Assistant\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"\",\n     \"company_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-prod?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-prod"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for company_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"AI Assistant\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"Best Copywriting App\",\n     \"company_name\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-prod?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-prod"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"AI Assistant\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"Best Copywriting App\",\n     \"company_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-prod?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-prod"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"AI Assistant\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"Best Copywriting App\",\n     \"company_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-prod?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-prod"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"product_name\": \"AI Assistant\",\n     \"product_description\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"search_term\": \"Best Copywriting App\",\n     \"company_name\": \"Writesonic\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/meta-prod?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"meta-prod"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Short Press Releases",
			"item": [
				{
					"name": "Short Press Releases",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"information\": \"Writesonic launches an AI-powered copywriting app that makes it super easy and fast for businesses to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"target_keyword\": \"landing page, Google ads, Facebook ads,\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/short-press-releases?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"short-press-releases"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for information",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"information\": \"\",\n     \"product_name\": \"Writesonic\",\n     \"target_keyword\": \"landing page, Google ads, Facebook ads,\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/short-press-releases?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"short-press-releases"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for product_name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"information\": \"Writesonic launches an AI-powered copywriting app that makes it super easy and fast for businesses to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"\",\n     \"target_keyword\": \"landing page, Google ads, Facebook ads,\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/short-press-releases?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"short-press-releases"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for target_keyword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"information\": \"Writesonic launches an AI-powered copywriting app that makes it super easy and fast for businesses to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"target_keyword\": \"\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/short-press-releases?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"short-press-releases"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for tone_of_voice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"information\": \"Writesonic launches an AI-powered copywriting app that makes it super easy and fast for businesses to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"target_keyword\": \"landing page, Google ads, Facebook ads,\",\n     \"tone_of_voice\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/short-press-releases?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"short-press-releases"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"information\": \"Writesonic launches an AI-powered copywriting app that makes it super easy and fast for businesses to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"target_keyword\": \"landing page, Google ads, Facebook ads,\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/short-press-releases?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"short-press-releases"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"information\": \"Writesonic launches an AI-powered copywriting app that makes it super easy and fast for businesses to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"target_keyword\": \"landing page, Google ads, Facebook ads,\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/short-press-releases?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"short-press-releases"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"information\": \"Writesonic launches an AI-powered copywriting app that makes it super easy and fast for businesses to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"product_name\": \"Writesonic\",\n     \"target_keyword\": \"landing page, Google ads, Facebook ads,\",\n     \"tone_of_voice\": \"excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/short-press-releases?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"short-press-releases"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Song Lyrics",
			"item": [
				{
					"name": "Song Lyrics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"topic\": \"Be my side forever\",\n     \"genre\": \"Rock\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/lyrics-generator?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"lyrics-generator"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for topic",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"topic\": \"\",\n     \"genre\": \"Rock\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/lyrics-generator?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"lyrics-generator"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for genre",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"topic\": \"Be my side forever\",\n     \"genre\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/lyrics-generator?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"lyrics-generator"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"topic\": \"Be my side forever\",\n     \"genre\": \"Rock\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/lyrics-generator?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"lyrics-generator"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"topic\": \"Be my side forever\",\n     \"genre\": \"Rock\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/lyrics-generator?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"lyrics-generator"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"topic\": \"Be my side forever\",\n     \"genre\": \"Rock\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/lyrics-generator?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"lyrics-generator"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Startup Ideas",
			"item": [
				{
					"name": "Startup Ideas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/startup-ideas?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"startup-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/startup-ideas?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"startup-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/startup-ideas?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"startup-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/startup-ideas?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"startup-ideas"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Stories",
			"item": [
				{
					"name": "Stories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"Robert Bruce was the king of Scotland, who was at war with England. Scotland lost all 6 battles against England. One day, a disheartened Robert sees a spider trying to weave her web but failing again and again. Seeing the spider's perseverance, Robert feels motivated again.\",\n     \"tone_of_voice\": \"Inspirational\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/story-generation?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"story-generation"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"\",\n     \"tone_of_voice\": \"Inspirational\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/story-generation?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"story-generation"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for tone_of_voice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"text\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"text\"\r",
									"      ]\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"Robert Bruce was the king of Scotland, who was at war with England. Scotland lost all 6 battles against England. One day, a disheartened Robert sees a spider trying to weave her web but failing again and again. Seeing the spider's perseverance, Robert feels motivated again.\",\n     \"tone_of_voice\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/story-generation?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"story-generation"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"Robert Bruce was the king of Scotland, who was at war with England. Scotland lost all 6 battles against England. One day, a disheartened Robert sees a spider trying to weave her web but failing again and again. Seeing the spider's perseverance, Robert feels motivated again.\",\n     \"tone_of_voice\": \"Inspirational\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/story-generation?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"story-generation"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"Robert Bruce was the king of Scotland, who was at war with England. Scotland lost all 6 battles against England. One day, a disheartened Robert sees a spider trying to weave her web but failing again and again. Seeing the spider's perseverance, Robert feels motivated again.\",\n     \"tone_of_voice\": \"Inspirational\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/story-generation?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"story-generation"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"description\": \"Robert Bruce was the king of Scotland, who was at war with England. Scotland lost all 6 battles against England. One day, a disheartened Robert sees a spider trying to weave her web but failing again and again. Seeing the spider's perseverance, Robert feels motivated again.\",\n     \"tone_of_voice\": \"Inspirational\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/story-generation?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"story-generation"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Text Summary",
			"item": [
				{
					"name": "Text Summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"summary\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"array\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"article_url\": \"https://www.databreaches.net/8base-claims-to-have-stolen-patient-data-and-employee-info-from-kansas-medical-center/\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/summary?engine={{engine}}&language={{language}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"summary"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for article_url",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"detail\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article_url\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/summary?engine={{engine}}&language={{language}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"summary"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article_url\": \"https://techcrunch.com/2019/08/12/verizon-is-selling-tumblr-to-wordpress-parent-automattic/\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/summary?engine=&language={{language}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"summary"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"article_url\": \"https://techcrunch.com/2019/08/12/verizon-is-selling-tumblr-to-wordpress-parent-automattic/\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/summary?engine={{engine}}&language=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"summary"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tone Changer",
			"item": [
				{
					"name": "Tone Changer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"tone\": \"Excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/tone-changer?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"tone-changer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content\": \"\",\n     \"tone\": \"Excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/tone-changer?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"tone-changer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for tone",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"tone\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/tone-changer?engine={{engine}}&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"tone-changer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"tone\": \"Excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/tone-changer?engine=&language={{language}}&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"tone-changer"
							],
							"query": [
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"tone\": \"Excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/tone-changer?engine={{engine}}&language=&num_copies={{num_copies}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"tone-changer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								},
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Mandatory Validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"content\": \"Writesonic makes it super easy and fast for you to compose high-performing landing pages, product descriptions, ads, and blog posts in seconds.\",\n     \"tone\": \"Excited\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/tone-changer?engine={{engine}}&language={{language}}&num_copies=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"tone-changer"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "num_copies",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Make Ur Own AI",
			"item": [
				{
					"name": "Make Ur Own AI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"text\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"    \"type\": \"array\",\r",
									"    \"items\": [\r",
									"        {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"text\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"text\"\r",
									"            ]\r",
									"        }\r",
									"    ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"background_info\": \"\",\n    \"instruction\": \"Write a funny story about a day in the life of Optimus.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/command?num_copies={{num_copies}}&engine={{engine}}&language={{language}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"command"
							],
							"query": [
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								},
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Make Ur Own AI -  Mandatory validation for instruction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Input data validation error\",\"'ensure this value has at least 2 characters\");\r",
									"});\r",
									"\r",
									"// Response data type validation\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Test data type of the responsse\", () => {\r",
									"    pm.expect(jsonData).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"background_info\": \"\",\n    \"instruction\": \"\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/command?num_copies={{num_copies}}&engine={{engine}}&language={{language}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"command"
							],
							"query": [
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								},
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Make Ur Own AI -  Mandatory validation for engine",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Engine is invalid\");\r",
									"});\r",
									"\r",
									"// Schema validation\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"background_info\": \"\",\n    \"instruction\": \"Write a funny story about a day in the life of Optimus.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/command?num_copies={{num_copies}}&engine=&language={{language}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"command"
							],
							"query": [
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								},
								{
									"key": "engine",
									"value": ""
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Make Ur Own AI -  Mandatory validation for language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Language is invalid\");\r",
									"});\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"background_info\": \"\",\n    \"instruction\": \"Write a funny story about a day in the life of Optimus.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/command?num_copies={{num_copies}}&engine={{engine}}&language=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"command"
							],
							"query": [
								{
									"key": "num_copies",
									"value": "{{num_copies}}"
								},
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Make Ur Own AI -  Mandatory validation for num_copies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 00\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"value is not a valid integer\");\r",
									"});\r",
									"\r",
									"//Json schema\r",
									"const jsonData = pm.response.json();\r",
									"var schema = {\r",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"detail\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": [\r",
									"        {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"loc\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": [\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              ]\r",
									"            },\r",
									"            \"msg\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"type\": {\r",
									"              \"type\": \"string\"\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"loc\",\r",
									"            \"msg\",\r",
									"            \"type\"\r",
									"          ]\r",
									"        }\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"detail\"\r",
									"  ]\r",
									"}\r",
									"pm.test('schema is valid', function () {\r",
									"\r",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "d1e1e5b5-ff60-43e0-9339-1aaf53ab840c"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"background_info\": \"\",\n    \"instruction\": \"Write a funny story about a day in the life of Optimus.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/command?num_copies=&engine={{engine}}&language={{language}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"command"
							],
							"query": [
								{
									"key": "num_copies",
									"value": ""
								},
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Photosonic",
			"item": [
				{
					"name": "Photosonic",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "x-api-key",
								"value": "{{X-API-KEY}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"prompt\": \"A shiny brown bathrobe evolving into a candybar in a temple, In the movie Jurassic Park, Highly Detailed\"\r\n//   \"num_images\": \"2\"\r\n}\r\n"
						},
						"url": {
							"raw": "{{base_url}}/v2/business/content/generate-image?engine=premium&language=en",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"generate-image"
							],
							"query": [
								{
									"key": "engine",
									"value": "premium"
								},
								{
									"key": "language",
									"value": "en"
								},
								{
									"key": "num_copies",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AW3",
			"item": [
				{
					"name": "Article writer 3 sse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Test 1: Verify response status code is 200 (OK)\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Verify Content-Type header is correct for SSE\r",
									"pm.test(\"Content-Type header is text/event-stream\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/event-stream\");\r",
									"});\r",
									"\r",
									"// Test 3: Verify the response is not empty\r",
									"pm.test(\"Response body is not empty\", function() {\r",
									"    pm.response.to.not.be.empty;\r",
									"    pm.expect(pm.response.text().length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"// Test 4: Parse the response and extract all events\r",
									"const responseText = pm.response.text();\r",
									"const responseLines = responseText.split(\"\\n\");\r",
									"const events = [];\r",
									"let currentEvent = null;\r",
									"\r",
									"for (let i = 0; i < responseLines.length; i++) {\r",
									"    const line = responseLines[i].trim();\r",
									"    \r",
									"    if (line.startsWith(\"event:\")) {\r",
									"        if (currentEvent) {\r",
									"            events.push(currentEvent);\r",
									"        }\r",
									"        currentEvent = {\r",
									"            type: line.substring(6).trim(),\r",
									"            data: []\r",
									"        };\r",
									"    } else if (line.startsWith(\"data:\") && currentEvent) {\r",
									"        currentEvent.data.push(line.substring(5));\r",
									"    } else if (line === \"\" && currentEvent) {\r",
									"        // Empty line indicates end of an event\r",
									"        if (Object.keys(currentEvent).length > 0) {\r",
									"            events.push(currentEvent);\r",
									"            currentEvent = null;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"// Add the last event if there is one\r",
									"if (currentEvent && Object.keys(currentEvent).length > 0) {\r",
									"    events.push(currentEvent);\r",
									"}\r",
									"\r",
									"// Store the parsed events for use in subsequent tests\r",
									"pm.variables.set(\"parsedEvents\", JSON.stringify(events));\r",
									"\r",
									"// Test 5: Verify presence of update events\r",
									"pm.test(\"Response contains update events\", function() {\r",
									"    const updateEvents = events.filter(event => event.type === \"update\");\r",
									"    pm.expect(updateEvents.length).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"// Test 6: Verify essential events exist if response ends with \"Success\"\r",
									"pm.test(\"Response contains all required event types when complete\", function() {\r",
									"    // Check if the response ends with Success\r",
									"    const endsWithSuccess = responseText.includes(\"event: end\") && \r",
									"                            responseText.includes(\"data: Success\");\r",
									"    \r",
									"    if (endsWithSuccess) {\r",
									"        // These events should be present in a complete response\r",
									"        const requiredEventTypes = [\r",
									"            \"update\"\r",
									"        ];\r",
									"        \r",
									"        // Check if assistant response contains additional events\r",
									"        if (responseText.includes(\"user_message_uuid\")) {\r",
									"            requiredEventTypes.push(\"user_message_uuid\", \"assistant_message_uuid\", \"end\");\r",
									"        }\r",
									"        \r",
									"        requiredEventTypes.forEach(eventType => {\r",
									"            const hasEventType = events.some(event => event.type === eventType);\r",
									"            pm.expect(hasEventType).to.be.true;\r",
									"        });\r",
									"    } else {\r",
									"        pm.test.skip(\"Response does not end with Success, skipping complete response validation\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test 7: Validate UUID format when present\r",
									"pm.test(\"UUIDs are in valid format when present\", function() {\r",
									"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;\r",
									"    \r",
									"    // Check for user_message_uuid and assistant_message_uuid events\r",
									"    const uuidEvents = events.filter(event => \r",
									"        event.type === \"user_message_uuid\" || \r",
									"        event.type === \"assistant_message_uuid\"\r",
									"    );\r",
									"    \r",
									"    if (uuidEvents.length > 0) {\r",
									"        uuidEvents.forEach(event => {\r",
									"            if (event.data && event.data.length > 0) {\r",
									"                try {\r",
									"                    const dataObj = JSON.parse(event.data[0]);\r",
									"                    if (dataObj.uuid) {\r",
									"                        pm.expect(dataObj.uuid).to.match(uuidRegex);\r",
									"                    }\r",
									"                } catch (e) {\r",
									"                    pm.expect.fail(`Failed to parse UUID JSON: ${e.message}`);\r",
									"                }\r",
									"            }\r",
									"        });\r",
									"    } else {\r",
									"        pm.test.skip(\"No UUID events found in response\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test 8: Validate ping message format when present\r",
									"pm.test(\"Ping message format is correct (if present)\", function() {\r",
									"    if (responseText.includes(\": ping\")) {\r",
									"        const pingLine = responseLines.find(line => line.includes(\": ping\"));\r",
									"        pm.expect(pingLine).to.match(/: ping - \\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}/);\r",
									"    } else {\r",
									"        pm.test.skip(\"No ping message found in this response\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test 9: Check content is related to AI/copywriting\r",
									"pm.test(\"Response contains AI or copywriting related content\", function() {\r",
									"    const updateEvents = events.filter(event => event.type === \"update\");\r",
									"    const updateContent = updateEvents.flatMap(event => event.data).join(\" \");\r",
									"    \r",
									"    const aiKeywords = [\r",
									"        \"AI\", \"Artificial Intelligence\", \"machine learning\", \"algorithm\", \r",
									"        \"automation\", \"copy\", \"writing\", \"content\", \"generation\"\r",
									"    ];\r",
									"    \r",
									"    const containsAIContent = aiKeywords.some(keyword => \r",
									"        updateContent.includes(keyword)\r",
									"    );\r",
									"    \r",
									"    pm.expect(containsAIContent).to.be.true;\r",
									"});\r",
									"\r",
									"// Test 10: Verify meta event structure when present\r",
									"pm.test(\"Meta event has required properties when present\", function() {\r",
									"    const metaEvents = events.filter(event => event.type === \"meta\");\r",
									"    \r",
									"    if (metaEvents.length > 0) {\r",
									"        metaEvents.forEach(event => {\r",
									"            if (event.data && event.data.length > 0) {\r",
									"                try {\r",
									"                    const metaData = JSON.parse(event.data[0]);\r",
									"                    pm.expect(metaData).to.have.property(\"remaining_generations\");\r",
									"                    pm.expect(metaData).to.have.property(\"is_conversation_limit_reached\");\r",
									"                } catch (e) {\r",
									"                    pm.expect.fail(`Failed to parse meta event data: ${e.message}`);\r",
									"                }\r",
									"            }\r",
									"        });\r",
									"    } else {\r",
									"        pm.test.skip(\"No meta events found in response\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test 11: Verify should_nudge_for_mm event format when present\r",
									"pm.test(\"should_nudge_for_mm event has correct format when present\", function() {\r",
									"    const nudgeEvents = events.filter(event => event.type === \"should_nudge_for_mm\");\r",
									"    \r",
									"    if (nudgeEvents.length > 0) {\r",
									"        nudgeEvents.forEach(event => {\r",
									"            if (event.data && event.data.length > 0) {\r",
									"                try {\r",
									"                    const nudgeData = JSON.parse(event.data[0]);\r",
									"                    pm.expect(nudgeData).to.have.property(\"should_nudge_for_mm\");\r",
									"                    pm.expect(typeof nudgeData.should_nudge_for_mm).to.equal(\"boolean\");\r",
									"                } catch (e) {\r",
									"                    pm.expect.fail(`Failed to parse nudge event data: ${e.message}`);\r",
									"                }\r",
									"            }\r",
									"        });\r",
									"    } else {\r",
									"        pm.test.skip(\"No should_nudge_for_mm events found in response\");\r",
									"    }\r",
									"});\r",
									"// Test 13: Check for structured content patterns (Markdown headers, images)\r",
									"pm.test(\"Response contains structured content patterns\", function() {\r",
									"    const updateContent = events\r",
									"        .filter(event => event.type === \"update\")\r",
									"        .flatMap(event => event.data)\r",
									"        .join(\"\\n\");\r",
									"    \r",
									"    // Look for markdown headers, images, or HTML tags\r",
									"    const hasStructuredContent = \r",
									"        updateContent.includes(\"#\") || \r",
									"        updateContent.includes(\"![Image]\") || \r",
									"        updateContent.includes(\"<br\") ||\r",
									"        updateContent.includes(\"<sub>\");\r",
									"    \r",
									"    pm.expect(hasStructuredContent).to.be.true;\r",
									"});\r",
									"\r",
									"// Test 14: Verify event sequence logic\r",
									"pm.test(\"Events follow logical sequence\", function() {\r",
									"    // Check for loading at beginning (if present)\r",
									"    if (events.length > 0 && events.some(e => e.type === \"loading\")) {\r",
									"        const loadingIndex = events.findIndex(e => e.type === \"loading\");\r",
									"        pm.expect(loadingIndex).to.be.lessThan(5); // Should be among first few events\r",
									"    }\r",
									"    \r",
									"    // Check for end at the end (if present)\r",
									"    if (events.length > 0 && events.some(e => e.type === \"end\")) {\r",
									"        const endIndex = events.findIndex(e => e.type === \"end\");\r",
									"        pm.expect(endIndex).to.be.greaterThan(events.length - 3); // Should be among last few events\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test 15: Check for consistent event-data pairing\r",
									"pm.test(\"Events and data are consistently paired\", function() {\r",
									"    let eventCount = 0;\r",
									"    let dataLineCount = 0;\r",
									"    \r",
									"    responseLines.forEach(line => {\r",
									"        if (line.trim().startsWith(\"event:\")) {\r",
									"            eventCount++;\r",
									"        } else if (line.trim().startsWith(\"data:\")) {\r",
									"            dataLineCount++;\r",
									"        }\r",
									"    });\r",
									"    \r",
									"    // In a proper SSE response, each event should have at least one data line\r",
									"    // But there can be multiple data lines per event\r",
									"    pm.expect(dataLineCount).to.be.at.least(eventCount);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/v2/business/content/ai-article-writer-v3/sse?engine=premium&language=en&data={%0A%20%22article_title%22%3A%20%22AI%20in%20copywriting%22%2C%0A%20%22article_intro%22%3A%20%22AI%20stands%20for%20Artificial%20Intelligence%22%2C%0A%20%22article_sections%22%3A%20[%22Introduction%20to%20AI%22%2C%20%22Advantages%20of%20AI%22]%0A}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"ai-article-writer-v3",
								"sse"
							],
							"query": [
								{
									"key": "engine",
									"value": "premium"
								},
								{
									"key": "language",
									"value": "en"
								},
								{
									"key": "data",
									"value": "{%0A%20%22article_title%22%3A%20%22AI%20in%20copywriting%22%2C%0A%20%22article_intro%22%3A%20%22AI%20stands%20for%20Artificial%20Intelligence%22%2C%0A%20%22article_sections%22%3A%20[%22Introduction%20to%20AI%22%2C%20%22Advantages%20of%20AI%22]%0A}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "AW4",
			"item": [
				{
					"name": "Article Writer 4.O",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Test 1: Verify response status code is 200 (OK)\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Verify that the response contains SSE format (events and data)\r",
									"pm.test(\"Response contains SSE format with events and data\", function() {\r",
									"    pm.expect(pm.response.text()).to.include(\"event: update\");\r",
									"    pm.expect(pm.response.text()).to.include(\"data:\");\r",
									"});\r",
									"\r",
									"// Test 3: Verify that the content type header is correct for SSE\r",
									"pm.test(\"Content-Type header is present and correct\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/event-stream\");\r",
									"});\r",
									"\r",
									"\r",
									"// Test 4: Verify event structure consistency\r",
									"pm.test(\"Event structure is consistent\", function() {\r",
									"    const responseLines = pm.response.text().split(\"\\n\");\r",
									"    let eventCount = 0;\r",
									"    let dataCount = 0;\r",
									"    \r",
									"    responseLines.forEach(line => {\r",
									"        if (line.startsWith(\"event: update\")) {\r",
									"            eventCount++;\r",
									"        } else if (line.startsWith(\"data:\")) {\r",
									"            dataCount++;\r",
									"        }\r",
									"    });\r",
									"    \r",
									"    pm.expect(eventCount).to.be.greaterThan(0);\r",
									"    pm.expect(dataCount).to.be.greaterThan(0);\r",
									"    // In a well-formed SSE response, we'd typically expect these to be related\r",
									"    // The exact relationship depends on your API's specific behavior\r",
									"});\r",
									"\r",
									"// Test 5: Verify the response contains image data references\r",
									"pm.test(\"Response contains image data references\", function() {\r",
									"    pm.expect(pm.response.text()).to.include(\"Image\");\r",
									"    pm.expect(pm.response.text()).to.include(\"https://images.pexels.com\");\r",
									"});\r",
									"\r",
									"// Test 6: Check if there are no error events in the response\r",
									"pm.test(\"No error events in the response\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.include(\"event: error\");\r",
									"});\r",
									"\r",
									"\r",
									"// Test 7: Verify ping message format if present\r",
									"pm.test(\"Ping message format is correct (if present)\", function() {\r",
									"    const responseText = pm.response.text();\r",
									"    \r",
									"    if (responseText.includes(\": ping\")) {\r",
									"        const pingLine = responseText.split(\"\\n\").find(line => line.includes(\": ping\"));\r",
									"        pm.expect(pingLine).to.match(/: ping - \\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}/);\r",
									"    } else {\r",
									"        pm.test.skip(\"No ping message found in this response\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test 8: Verify response completion (optional, if your API indicates completion)\r",
									"pm.test(\"Response indicates proper completion\", function() {\r",
									"    // This test may need customization based on how your API signals completion\r",
									"    // For example, some SSE implementations send a specific event like \"complete\"\r",
									"    // or have a known final message\r",
									"    \r",
									"    const responseText = pm.response.text();\r",
									"    const lastLines = responseText.split(\"\\n\").slice(-10).join(\"\\n\");\r",
									"    \r",
									"    // If your API has a specific completion indicator, check for it here\r",
									"    // This is a placeholder test that may need adjustment\r",
									"    pm.expect(true).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "{{X-API-KEY}}"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/v2/business/content/ai-article-writer-v4/sse?engine={{engine}}&language={{language}}&data={\"article_title\": \"AI in copywriting\",\"person\": \"Third Person\",\"article_sections\": [\"Introduction to AI\", \"Advantages of AI\"]}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"v2",
								"business",
								"content",
								"ai-article-writer-v4",
								"sse"
							],
							"query": [
								{
									"key": "engine",
									"value": "{{engine}}"
								},
								{
									"key": "language",
									"value": "{{language}}"
								},
								{
									"key": "data",
									"value": "{\"article_title\": \"AI in copywriting\",\"person\": \"Third Person\",\"article_sections\": [\"Introduction to AI\", \"Advantages of AI\"]}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CHATSONIC_SSE",
			"item": [
				{
					"name": "Chatsonic sse",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"// Test 1: Verify response status code is 200 (OK)\r",
									"pm.test(\"Status code is 200\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Verify Content-Type header is correct for SSE\r",
									"pm.test(\"Content-Type header is text/event-stream\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/event-stream\");\r",
									"});\r",
									"\r",
									"// Test 3: Verify required event types are present\r",
									"pm.test(\"Response contains all required event types\", function() {\r",
									"    const responseText = pm.response.text();\r",
									"    const requiredEvents = [\r",
									"        \"event: loading\",\r",
									"        \"event: user_message_uuid\",\r",
									"        \"event: assistant_message_uuid\",\r",
									"        \"event: update\",\r",
									"        \"event: should_nudge_for_mm\",\r",
									"        \"event: meta\",\r",
									"        \"event: end\"\r",
									"    ];\r",
									"    \r",
									"    requiredEvents.forEach(eventType => {\r",
									"        pm.expect(responseText).to.include(eventType);\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test 5: Verify loading event has appropriate data\r",
									"pm.test(\"Loading event has appropriate structure\", function() {\r",
									"    const responseLines = pm.response.text().split(\"\\n\");\r",
									"    let foundLoadingEvent = false;\r",
									"    \r",
									"    for (let i = 0; i < responseLines.length; i++) {\r",
									"        if (responseLines[i].trim() === \"event: loading\") {\r",
									"            foundLoadingEvent = true;\r",
									"            // The next line should be a data line\r",
									"            if (i + 1 < responseLines.length) {\r",
									"                pm.expect(responseLines[i+1].trim()).to.match(/^data:.*$/);\r",
									"            }\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    pm.expect(foundLoadingEvent).to.be.true;\r",
									"});\r",
									"\r",
									"// Test 6: Verify response ends with success message\r",
									"pm.test(\"Response ends with success message\", function() {\r",
									"    const responseLines = pm.response.text().split(\"\\n\");\r",
									"    let endEventIndex = -1;\r",
									"    \r",
									"    // Find the end event\r",
									"    for (let i = 0; i < responseLines.length; i++) {\r",
									"        if (responseLines[i].trim() === \"event: end\") {\r",
									"            endEventIndex = i;\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    pm.expect(endEventIndex).to.not.equal(-1);\r",
									"    \r",
									"    // Check if the next non-empty line is a success data message\r",
									"    if (endEventIndex !== -1 && endEventIndex + 1 < responseLines.length) {\r",
									"        pm.expect(responseLines[endEventIndex + 1].trim()).to.equal(\"data: Success\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Test 7: Verify meta event contains required properties\r",
									"pm.test(\"Meta event contains required properties\", function() {\r",
									"    const responseLines = pm.response.text().split(\"\\n\");\r",
									"    let metaEventDataLine = \"\";\r",
									"    \r",
									"    // Find the meta event data\r",
									"    for (let i = 0; i < responseLines.length; i++) {\r",
									"        if (responseLines[i].trim() === \"event: meta\" && i + 1 < responseLines.length) {\r",
									"            metaEventDataLine = responseLines[i + 1];\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    pm.expect(metaEventDataLine).to.not.be.empty;\r",
									"    \r",
									"    // Check that it contains the required properties\r",
									"    pm.expect(metaEventDataLine).to.include(\"remaining_generations\");\r",
									"    pm.expect(metaEventDataLine).to.include(\"is_conversation_limit_reached\");\r",
									"});\r",
									"\r",
									"// Test 9: Verify should_nudge_for_mm event\r",
									"pm.test(\"should_nudge_for_mm event has correct format\", function() {\r",
									"    const responseLines = pm.response.text().split(\"\\n\");\r",
									"    let nudgeEventDataLine = \"\";\r",
									"    \r",
									"    // Find the should_nudge_for_mm event data\r",
									"    for (let i = 0; i < responseLines.length; i++) {\r",
									"        if (responseLines[i].trim() === \"event: should_nudge_for_mm\" && i + 1 < responseLines.length) {\r",
									"            nudgeEventDataLine = responseLines[i + 1];\r",
									"            break;\r",
									"        }\r",
									"    }\r",
									"    \r",
									"    pm.expect(nudgeEventDataLine).to.not.be.empty;\r",
									"    \r",
									"    // Check that it contains the required property\r",
									"    pm.expect(nudgeEventDataLine).to.include(\"should_nudge_for_mm\");\r",
									"    \r",
									"    // Check that it's a boolean value\r",
									"    pm.expect(nudgeEventDataLine).to.match(/data: {\"should_nudge_for_mm\": (true|false)}/);\r",
									"});\r",
									"\r",
									"// Test 10: Verify overall sequence of events follows expected pattern\r",
									"pm.test(\"Events follow expected sequence\", function() {\r",
									"    const responseText = pm.response.text();\r",
									"    const eventSequence = responseText.match(/event: [a-z_]+/g);\r",
									"    \r",
									"    // Event pattern expectations (simplified for flexibility):\r",
									"    // 1. Should start with loading\r",
									"    if (eventSequence && eventSequence.length > 0) {\r",
									"        pm.expect(eventSequence[0]).to.equal(\"event: loading\");\r",
									"    }\r",
									"    \r",
									"    // 2. Should include user and assistant message UUIDs near the beginning\r",
									"    if (eventSequence && eventSequence.length > 2) {\r",
									"        pm.expect(eventSequence.slice(0, 4).join(\" \")).to.include(\"event: user_message_uuid\");\r",
									"        pm.expect(eventSequence.slice(0, 4).join(\" \")).to.include(\"event: assistant_message_uuid\");\r",
									"    }\r",
									"    \r",
									"    // 3. Should end with meta and end events\r",
									"    if (eventSequence && eventSequence.length > 2) {\r",
									"        const lastEvents = eventSequence.slice(-2);\r",
									"        pm.expect(lastEvents).to.include(\"event: meta\");\r",
									"        pm.expect(lastEvents).to.include(\"event: end\");\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-KEY",
								"value": "<Your API Key>"
							},
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "content-type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://api.writesonic.com/v2/business/content/chatsonic/sse?engine=superior&language=en&data=%7B%22enable_memory%22%3Atrue%2C%22enable_google_results%22%3Atrue%2C%22input_text%22%3A%22Define%20AI%22%2C%22history_data%22%3A%5B%7B%22is_sent%22%3Atrue%2C%22message%22%3A%22Tell%20me%20about%20AI%22%7D%2C%7B%22is_sent%22%3Afalse%2C%22message%22%3A%22Sure%20what%20exactly%3F%22%7D%5D%7D",
							"protocol": "https",
							"host": [
								"api",
								"writesonic",
								"com"
							],
							"path": [
								"v2",
								"business",
								"content",
								"chatsonic",
								"sse"
							],
							"query": [
								{
									"key": "engine",
									"value": "superior"
								},
								{
									"key": "language",
									"value": "en"
								},
								{
									"key": "data",
									"value": "%7B%22enable_memory%22%3Atrue%2C%22enable_google_results%22%3Atrue%2C%22input_text%22%3A%22Define%20AI%22%2C%22history_data%22%3A%5B%7B%22is_sent%22%3Atrue%2C%22message%22%3A%22Tell%20me%20about%20AI%22%7D%2C%7B%22is_sent%22%3Afalse%2C%22message%22%3A%22Sure%20what%20exactly%3F%22%7D%5D%7D"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "blog-ideas",
			"item": [
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{X-API-KEY}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-API-KEY",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "language",
			"value": "",
			"type": "string"
		},
		{
			"key": "engine",
			"value": "",
			"type": "string"
		},
		{
			"key": "num_copies",
			"value": "",
			"type": "string"
		},
		{
			"key": "base_url",
			"value": "http://localhost:8081"
		}
	]
}